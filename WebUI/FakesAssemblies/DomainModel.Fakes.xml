<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DomainModel.Fakes</name>
    </assembly>
    <members>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimContentInfo">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.ContentInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimContentInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimContentInfo.#ctor(DomainModel.DocInfoRef.ContentInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimContentInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimContentInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.Constructor">
            <summary>Задает оболочка совместимости ContentInfo.ContentInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.CustomDocMetaDataGet">
            <summary>Задает оболочка совместимости ContentInfo.get_CustomDocMetaData()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.CustomDocMetaDataSetIdcPropertyArray">
            <summary>Задает оболочка совместимости ContentInfo.set_CustomDocMetaData(IdcProperty[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dCheckoutUserGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dCheckoutUser()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dCheckoutUserSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dCheckoutUser(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dCreateDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dCreateDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dCreateDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dCreateDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocAccountGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocAccount()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocAccountSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocAccount(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocAuthorGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocAuthor()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocAuthorSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocNameGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocNameSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocTitleGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocTitle()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocTitleSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocTypeGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dDocTypeSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dExtensionGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dExtension()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dExtensionSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFileSizeGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dFileSize()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFileSizeSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFlag1Get">
            <summary>Задает оболочка совместимости ContentInfo.get_dFlag1()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFlag1SetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dFlag1(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFormatGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dFormatSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dInDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dInDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIndexerStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIndexerState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIndexerStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dIndexerState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsCheckedOutGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsCheckedOut()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsCheckedOutSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsCheckedOut(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsCheckedOutSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsCheckedOutSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsCheckedOutSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsCheckedOutSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsPrimaryGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsPrimary()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsPrimarySetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsPrimary(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsPrimarySpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsPrimarySpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsPrimarySpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsPrimarySpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsWebFormatGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsWebFormat()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsWebFormatSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsWebFormat(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsWebFormatSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsWebFormatSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dIsWebFormatSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsWebFormatSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dLocationGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dLocation()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dLocationSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dLocation(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dMessageGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dMessage()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dMessageSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dMessage(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dOriginalNameGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dOriginalName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dOriginalNameSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dOriginalName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dOutDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dOutDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dProcessingStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dProcessingState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dProcessingStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dProcessingState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dPublishStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dPublishState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dPublishStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dPublishState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dPublishTypeGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dPublishType()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dPublishTypeSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dPublishType(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dReleaseDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dReleaseDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dReleaseDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dReleaseDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dReleaseStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dReleaseState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dReleaseStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dReleaseState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRendition1Get">
            <summary>Задает оболочка совместимости ContentInfo.get_dRendition1()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRendition1SetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dRendition1(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRendition2Get">
            <summary>Задает оболочка совместимости ContentInfo.get_dRendition2()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRendition2SetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dRendition2(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevClassIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevClassID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevClassIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevClassID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevClassIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevClassIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevClassIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevClassIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevLabelGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevLabelSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevisionIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dSecurityGroupGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dStatusGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dStatus()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dStatusSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dStatus(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dWebExtensionGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dWebExtension()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.dWebExtensionSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dWebExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocAnnotationGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocAnnotation()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocAnnotationSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocAnnotation(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocAuthorsTPU_FIOGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocAuthorsTPU_FIO()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocAuthorsTPU_FIOSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocAuthorsTPU_FIO(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocCaptionGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocCaptionSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocCoAuthorsGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocCoAuthors()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocCoAuthorsSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocCoAuthors(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocKeyWordsGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocKeyWords()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.xDocKeyWordsSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocKeyWords(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.CustomDocMetaDataGet">
            <summary>Задает оболочка совместимости ContentInfo.get_CustomDocMetaData()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.CustomDocMetaDataSetIdcPropertyArray">
            <summary>Задает оболочка совместимости ContentInfo.set_CustomDocMetaData(IdcProperty[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dCheckoutUserGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dCheckoutUser()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dCheckoutUserSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dCheckoutUser(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dCreateDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dCreateDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dCreateDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dCreateDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocAccountGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocAccount()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocAccountSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocAccount(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocAuthorGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocAuthor()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocAuthorSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocNameGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocNameSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocTitleGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocTitle()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocTitleSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocTypeGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dDocTypeSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dExtensionGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dExtension()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dExtensionSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFileSizeGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dFileSize()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFileSizeSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFlag1Get">
            <summary>Задает оболочка совместимости ContentInfo.get_dFlag1()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFlag1SetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dFlag1(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFormatGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dFormatSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dInDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dInDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIndexerStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIndexerState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIndexerStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dIndexerState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsCheckedOutGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsCheckedOut()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsCheckedOutSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsCheckedOut(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsCheckedOutSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsCheckedOutSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsCheckedOutSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsCheckedOutSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsPrimaryGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsPrimary()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsPrimarySetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsPrimary(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsPrimarySpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsPrimarySpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsPrimarySpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsPrimarySpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsWebFormatGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsWebFormat()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsWebFormatSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsWebFormat(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsWebFormatSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dIsWebFormatSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dIsWebFormatSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dIsWebFormatSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dLocationGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dLocation()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dLocationSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dLocation(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dMessageGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dMessage()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dMessageSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dMessage(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dOriginalNameGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dOriginalName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dOriginalNameSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dOriginalName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dOutDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dOutDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dProcessingStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dProcessingState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dProcessingStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dProcessingState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dPublishStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dPublishState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dPublishStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dPublishState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dPublishTypeGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dPublishType()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dPublishTypeSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dPublishType(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dReleaseDateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dReleaseDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dReleaseDateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dReleaseDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dReleaseStateGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dReleaseState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dReleaseStateSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dReleaseState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRendition1Get">
            <summary>Задает оболочка совместимости ContentInfo.get_dRendition1()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRendition1SetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dRendition1(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRendition2Get">
            <summary>Задает оболочка совместимости ContentInfo.get_dRendition2()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRendition2SetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dRendition2(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevClassIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevClassID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevClassIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevClassID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevClassIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevClassIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevClassIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevClassIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevLabelGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevLabelSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevisionIDGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости ContentInfo.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dSecurityGroupGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dStatusGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dStatus()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dStatusSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dStatus(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dWebExtensionGet">
            <summary>Задает оболочка совместимости ContentInfo.get_dWebExtension()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.dWebExtensionSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_dWebExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocAnnotationGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocAnnotation()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocAnnotationSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocAnnotation(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocAuthorsTPU_FIOGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocAuthorsTPU_FIO()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocAuthorsTPU_FIOSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocAuthorsTPU_FIO(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocCaptionGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocCaptionSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocCoAuthorsGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocCoAuthors()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocCoAuthorsSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocCoAuthors(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocKeyWordsGet">
            <summary>Задает оболочка совместимости ContentInfo.get_xDocKeyWords()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimContentInfo.AllInstances.xDocKeyWordsSetString">
            <summary>Задает оболочка совместимости ContentInfo.set_xDocKeyWords(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfo">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.DocInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfo.#ctor(DomainModel.DocInfoRef.DocInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfo.Bind(System.ComponentModel.IComponent)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfo.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.CancelAsyncObject">
            <summary>Задает оболочка совместимости DocInfo.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.Constructor">
            <summary>Задает оболочка совместимости DocInfo.DocInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByIDAsyncInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByIDAsync(Int32 dID, Boolean dIDSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByIDAsyncInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByIDAsync(Int32 dID, Boolean dIDSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByIDCompletedAddDocInfoByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.add_DocInfoByIDCompleted(DocInfoByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByIDCompletedRemoveDocInfoByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.remove_DocInfoByIDCompleted(DocInfoByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByIDInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByID(Int32 dID, Boolean dIDSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByNameAsyncStringIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByNameAsync(String dDocName, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByNameAsyncStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByNameAsync(String dDocName, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByNameCompletedAddDocInfoByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.add_DocInfoByNameCompleted(DocInfoByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByNameCompletedRemoveDocInfoByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.remove_DocInfoByNameCompleted(DocInfoByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.DocInfoByNameStringIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByName(String dDocName, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости DocInfo.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.OnDocInfoByIDOperationCompletedObject">
            <summary>Задает оболочка совместимости DocInfo.OnDocInfoByIDOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.OnDocInfoByNameOperationCompletedObject">
            <summary>Задает оболочка совместимости DocInfo.OnDocInfoByNameOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.UrlGet">
            <summary>Задает оболочка совместимости DocInfo.get_Url()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.UrlSetString">
            <summary>Задает оболочка совместимости DocInfo.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости DocInfo.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости DocInfo.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.CancelAsyncObject">
            <summary>Задает оболочка совместимости DocInfo.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByIDAsyncInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByIDAsync(Int32 dID, Boolean dIDSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByIDAsyncInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByIDAsync(Int32 dID, Boolean dIDSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByIDCompletedAddDocInfoByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.add_DocInfoByIDCompleted(DocInfoByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByIDCompletedRemoveDocInfoByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.remove_DocInfoByIDCompleted(DocInfoByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByIDInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByID(Int32 dID, Boolean dIDSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByNameAsyncStringIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByNameAsync(String dDocName, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByNameAsyncStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByNameAsync(String dDocName, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByNameCompletedAddDocInfoByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.add_DocInfoByNameCompleted(DocInfoByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByNameCompletedRemoveDocInfoByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости DocInfo.remove_DocInfoByNameCompleted(DocInfoByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.DocInfoByNameStringIdcPropertyArray">
            <summary>Задает оболочка совместимости DocInfo.DocInfoByName(String dDocName, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости DocInfo.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.OnDocInfoByIDOperationCompletedObject">
            <summary>Задает оболочка совместимости DocInfo.OnDocInfoByIDOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.OnDocInfoByNameOperationCompletedObject">
            <summary>Задает оболочка совместимости DocInfo.OnDocInfoByNameOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.UrlGet">
            <summary>Задает оболочка совместимости DocInfo.get_Url()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.UrlSetString">
            <summary>Задает оболочка совместимости DocInfo.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости DocInfo.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfo.AllInstances.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости DocInfo.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.DocInfoByIDCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.#ctor(DomainModel.DocInfoRef.DocInfoByIDCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости DocInfoByIDCompletedEventArgs.DocInfoByIDCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости DocInfoByIDCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости DocInfoByIDCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.DocInfoByIDResult</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.#ctor(DomainModel.DocInfoRef.DocInfoByIDResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.Constructor">
            <summary>Задает оболочка совместимости DocInfoByIDResult.DocInfoByIDResult()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.ContentInfoGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_ContentInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.ContentInfoSetContentInfoArray">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_ContentInfo(ContentInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.RevisionsGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_Revisions()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.RevisionsSetRevisionsArray">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_Revisions(Revisions[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.StatusInfoGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.WorkflowInfoGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_WorkflowInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.WorkflowInfoSetWorkflowInfoArray">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_WorkflowInfo(WorkflowInfo[] value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.ContentInfoGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_ContentInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.ContentInfoSetContentInfoArray">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_ContentInfo(ContentInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.RevisionsGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_Revisions()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.RevisionsSetRevisionsArray">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_Revisions(Revisions[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.WorkflowInfoGet">
            <summary>Задает оболочка совместимости DocInfoByIDResult.get_WorkflowInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByIDResult.AllInstances.WorkflowInfoSetWorkflowInfoArray">
            <summary>Задает оболочка совместимости DocInfoByIDResult.set_WorkflowInfo(WorkflowInfo[] value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.DocInfoByNameCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.#ctor(DomainModel.DocInfoRef.DocInfoByNameCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости DocInfoByNameCompletedEventArgs.DocInfoByNameCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости DocInfoByNameCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости DocInfoByNameCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.DocInfoByNameResult</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.#ctor(DomainModel.DocInfoRef.DocInfoByNameResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.Constructor">
            <summary>Задает оболочка совместимости DocInfoByNameResult.DocInfoByNameResult()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.ContentInfoGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_ContentInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.ContentInfoSetContentInfoArray">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_ContentInfo(ContentInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.RevisionsGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_Revisions()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.RevisionsSetRevisionsArray">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_Revisions(Revisions[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.StatusInfoGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.WorkflowInfoGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_WorkflowInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.WorkflowInfoSetWorkflowInfoArray">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_WorkflowInfo(WorkflowInfo[] value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.ContentInfoGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_ContentInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.ContentInfoSetContentInfoArray">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_ContentInfo(ContentInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.RevisionsGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_Revisions()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.RevisionsSetRevisionsArray">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_Revisions(Revisions[] value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.WorkflowInfoGet">
            <summary>Задает оболочка совместимости DocInfoByNameResult.get_WorkflowInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimDocInfoByNameResult.AllInstances.WorkflowInfoSetWorkflowInfoArray">
            <summary>Задает оболочка совместимости DocInfoByNameResult.set_WorkflowInfo(WorkflowInfo[] value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimIdcProperty">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.#ctor(DomainModel.DocInfoRef.IdcProperty)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.Constructor">
            <summary>Задает оболочка совместимости IdcProperty.IdcProperty()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.AllInstances.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.AllInstances.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.AllInstances.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimIdcProperty.AllInstances.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimRevisions">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.Revisions</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimRevisions.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimRevisions.#ctor(DomainModel.DocInfoRef.Revisions)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimRevisions.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimRevisions.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.Constructor">
            <summary>Задает оболочка совместимости Revisions.Revisions()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dDocNameGet">
            <summary>Задает оболочка совместимости Revisions.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dDocNameSetString">
            <summary>Задает оболочка совместимости Revisions.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dFormatGet">
            <summary>Задает оболочка совместимости Revisions.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dFormatSetString">
            <summary>Задает оболочка совместимости Revisions.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dIDGet">
            <summary>Задает оболочка совместимости Revisions.get_dID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dIDSetInt32">
            <summary>Задает оболочка совместимости Revisions.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости Revisions.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости Revisions.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dInDateGet">
            <summary>Задает оболочка совместимости Revisions.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dInDateSetString">
            <summary>Задает оболочка совместимости Revisions.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dOutDateGet">
            <summary>Задает оболочка совместимости Revisions.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dOutDateSetString">
            <summary>Задает оболочка совместимости Revisions.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dProcessingStateGet">
            <summary>Задает оболочка совместимости Revisions.get_dProcessingState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dProcessingStateSetString">
            <summary>Задает оболочка совместимости Revisions.set_dProcessingState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dRevLabelGet">
            <summary>Задает оболочка совместимости Revisions.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dRevLabelSetString">
            <summary>Задает оболочка совместимости Revisions.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dRevisionIDGet">
            <summary>Задает оболочка совместимости Revisions.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости Revisions.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости Revisions.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости Revisions.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dStatusGet">
            <summary>Задает оболочка совместимости Revisions.get_dStatus()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.dStatusSetString">
            <summary>Задает оболочка совместимости Revisions.set_dStatus(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dDocNameGet">
            <summary>Задает оболочка совместимости Revisions.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dDocNameSetString">
            <summary>Задает оболочка совместимости Revisions.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dFormatGet">
            <summary>Задает оболочка совместимости Revisions.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dFormatSetString">
            <summary>Задает оболочка совместимости Revisions.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dIDGet">
            <summary>Задает оболочка совместимости Revisions.get_dID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dIDSetInt32">
            <summary>Задает оболочка совместимости Revisions.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости Revisions.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости Revisions.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dInDateGet">
            <summary>Задает оболочка совместимости Revisions.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dInDateSetString">
            <summary>Задает оболочка совместимости Revisions.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dOutDateGet">
            <summary>Задает оболочка совместимости Revisions.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dOutDateSetString">
            <summary>Задает оболочка совместимости Revisions.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dProcessingStateGet">
            <summary>Задает оболочка совместимости Revisions.get_dProcessingState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dProcessingStateSetString">
            <summary>Задает оболочка совместимости Revisions.set_dProcessingState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dRevLabelGet">
            <summary>Задает оболочка совместимости Revisions.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dRevLabelSetString">
            <summary>Задает оболочка совместимости Revisions.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dRevisionIDGet">
            <summary>Задает оболочка совместимости Revisions.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости Revisions.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости Revisions.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости Revisions.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dStatusGet">
            <summary>Задает оболочка совместимости Revisions.get_dStatus()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimRevisions.AllInstances.dStatusSetString">
            <summary>Задает оболочка совместимости Revisions.set_dStatus(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimStatusInfo">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.#ctor(DomainModel.DocInfoRef.StatusInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.Constructor">
            <summary>Задает оболочка совместимости StatusInfo.StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimStatusInfo.AllInstances.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo">
            <summary>Тип оболочки совместимости для DomainModel.DocInfoRef.WorkflowInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.#ctor(DomainModel.DocInfoRef.WorkflowInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.Constructor">
            <summary>Задает оболочка совместимости WorkflowInfo.WorkflowInfo()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dClbraNameGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dClbraName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dClbraNameSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dClbraName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dCompletionDateGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dCompletionDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dCompletionDateSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dCompletionDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dDocNameGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dDocNameSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dIsCollaborationGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dIsCollaboration()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dIsCollaborationSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dIsCollaboration(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dIsCollaborationSpecifiedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dIsCollaborationSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dIsCollaborationSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dIsCollaborationSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dProjectIDGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dProjectID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dProjectIDSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dProjectID(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dSecurityGroupGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfComputedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfComputed()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfComputedSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfComputed(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfCurrentStepIDGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfCurrentStepID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfCurrentStepIDSetInt32">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfCurrentStepID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfCurrentStepIDSpecifiedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfCurrentStepIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfCurrentStepIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfCurrentStepIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfDescriptionGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfDescription()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfDescriptionSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfDescription(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfDirectoryGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfDirectory()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfDirectorySetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfDirectory(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfDocStateGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfDocState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfDocStateSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfDocState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfIDGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfIDSetInt32">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfIDSpecifiedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfNameGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfNameSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfStatusGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfStatus()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfStatusSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfStatus(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfTypeGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfType()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.dWfTypeSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfType(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dClbraNameGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dClbraName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dClbraNameSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dClbraName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dCompletionDateGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dCompletionDate()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dCompletionDateSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dCompletionDate(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dDocNameGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dDocNameSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dIsCollaborationGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dIsCollaboration()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dIsCollaborationSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dIsCollaboration(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dIsCollaborationSpecifiedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dIsCollaborationSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dIsCollaborationSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dIsCollaborationSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dProjectIDGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dProjectID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dProjectIDSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dProjectID(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dSecurityGroupGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfComputedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfComputed()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfComputedSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfComputed(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfCurrentStepIDGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfCurrentStepID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfCurrentStepIDSetInt32">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfCurrentStepID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfCurrentStepIDSpecifiedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfCurrentStepIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfCurrentStepIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfCurrentStepIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfDescriptionGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfDescription()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfDescriptionSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfDescription(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfDirectoryGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfDirectory()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfDirectorySetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfDirectory(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfDocStateGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfDocState()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfDocStateSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfDocState(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfIDGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfID()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfIDSetInt32">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfIDSpecifiedGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfNameGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfName()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfNameSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfName(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfStatusGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfStatus()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfStatusSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfStatus(String value)</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfTypeGet">
            <summary>Задает оболочка совместимости WorkflowInfo.get_dWfType()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.ShimWorkflowInfo.AllInstances.dWfTypeSetString">
            <summary>Задает оболочка совместимости WorkflowInfo.set_dWfType(String value)</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubContentInfo">
            <summary>Тип заглушки DomainModel.DocInfoRef.ContentInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubContentInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubContentInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubContentInfo</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubContentInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubContentInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubContentInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubDocInfo">
            <summary>Тип заглушки DomainModel.DocInfoRef.DocInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.Abort">
            <summary>Задает заглушка WebClientProtocol.Abort()</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.Abort01">
            <summary>Задает stub WebClientProtocol.Abort()</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.AttachBackingFieldToSite">
            <summary>Присоединение делегатов для эмуляции StubDocInfo.Site как свойства с резервным полем.</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.CanRaiseEventsGet">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.Dispose(System.Boolean)">
            <summary>Задает заглушка Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.DisposeBoolean">
            <summary>Задает stub Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetReaderForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetService(System.Type)">
            <summary>Задает заглушка Component.GetService(Type service)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetServiceType">
            <summary>Задает stub Component.GetService(Type service)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWebRequest(System.Uri)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWebRequestUri">
            <summary>Задает stub SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWebResponse(System.Net.WebRequest)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWebResponseWebRequest">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWebResponseWebRequestIAsyncResult">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.GetWriterForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocInfo</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.SiteGet">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.SiteSetISite">
            <summary>Задает stub Component.set_Site(ISite value)</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfo.ToString">
            <summary>Задает заглушка Component.ToString()</summary>
        </member>
        <member name="F:DomainModel.DocInfoRef.Fakes.StubDocInfo.ToString01">
            <summary>Задает stub Component.ToString()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfo.CanRaiseEvents">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfo.Site">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubDocInfoByIDResult">
            <summary>Тип заглушки DomainModel.DocInfoRef.DocInfoByIDResult</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfoByIDResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfoByIDResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocInfoByIDResult</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfoByIDResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfoByIDResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfoByIDResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubDocInfoByNameResult">
            <summary>Тип заглушки DomainModel.DocInfoRef.DocInfoByNameResult</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfoByNameResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubDocInfoByNameResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocInfoByNameResult</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfoByNameResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfoByNameResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubDocInfoByNameResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubIdcProperty">
            <summary>Тип заглушки DomainModel.DocInfoRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubIdcProperty.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubIdcProperty.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIdcProperty</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubIdcProperty.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubIdcProperty.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubIdcProperty.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubRevisions">
            <summary>Тип заглушки DomainModel.DocInfoRef.Revisions</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubRevisions.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubRevisions.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubRevisions</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubRevisions.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubRevisions.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubRevisions.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubStatusInfo">
            <summary>Тип заглушки DomainModel.DocInfoRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubStatusInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubStatusInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubStatusInfo</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubStatusInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubStatusInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubStatusInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.DocInfoRef.Fakes.StubWorkflowInfo">
            <summary>Тип заглушки DomainModel.DocInfoRef.WorkflowInfo</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubWorkflowInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.DocInfoRef.Fakes.StubWorkflowInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubWorkflowInfo</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubWorkflowInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubWorkflowInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.DocInfoRef.Fakes.StubWorkflowInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.ShimDocument">
            <summary>Тип оболочки совместимости для DomainModel.Entity.Document</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDocument.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDocument.#ctor(DomainModel.Entity.Document)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDocument.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDocument.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AnnotationGet">
            <summary>Задает оболочка совместимости Document.get_Annotation()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AnnotationSetString">
            <summary>Задает оболочка совместимости Document.set_Annotation(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AuthorGet">
            <summary>Задает оболочка совместимости Document.get_Author()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AuthorSetString">
            <summary>Задает оболочка совместимости Document.set_Author(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.CoAuthorGet">
            <summary>Задает оболочка совместимости Document.get_CoAuthor()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.CoAuthorSetString">
            <summary>Задает оболочка совместимости Document.set_CoAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ConstructorContentInfo">
            <summary>Задает оболочка совместимости Document.Document(ContentInfo contentInfo)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ConstructorFileInfo">
            <summary>Задает оболочка совместимости Document.Document(FileInfo fileInfo)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ConstructorSearchResults">
            <summary>Задает оболочка совместимости Document.Document(SearchResults searchResults)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.CreateDateGet">
            <summary>Задает оболочка совместимости Document.get_CreateDate()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.CreateDateSetString">
            <summary>Задает оболочка совместимости Document.set_CreateDate(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ExtensionGet">
            <summary>Задает оболочка совместимости Document.get_Extension()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ExtensionSetString">
            <summary>Задает оболочка совместимости Document.set_Extension(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.FileSizeGet">
            <summary>Задает оболочка совместимости Document.get_FileSize()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.FileSizeSetInt32">
            <summary>Задает оболочка совместимости Document.set_FileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.FormatGet">
            <summary>Задает оболочка совместимости Document.get_Format()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.FormatSetString">
            <summary>Задает оболочка совместимости Document.set_Format(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.FullTitleGet">
            <summary>Задает оболочка совместимости Document.get_FullTitle()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.FullTitleSetString">
            <summary>Задает оболочка совместимости Document.set_FullTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.IDGet">
            <summary>Задает оболочка совместимости Document.get_ID()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.IDSetInt32">
            <summary>Задает оболочка совместимости Document.set_ID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.InDateGet">
            <summary>Задает оболочка совместимости Document.get_InDate()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.InDateSetString">
            <summary>Задает оболочка совместимости Document.set_InDate(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.KeywordsGet">
            <summary>Задает оболочка совместимости Document.get_Keywords()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.KeywordsSetString">
            <summary>Задает оболочка совместимости Document.set_Keywords(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.NameGet">
            <summary>Задает оболочка совместимости Document.get_Name()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.NameSetString">
            <summary>Задает оболочка совместимости Document.set_Name(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ShortTitleGet">
            <summary>Задает оболочка совместимости Document.get_ShortTitle()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.ShortTitleSetString">
            <summary>Задает оболочка совместимости Document.set_ShortTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.TitleGet">
            <summary>Задает оболочка совместимости Document.get_Title()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.TitleSetString">
            <summary>Задает оболочка совместимости Document.set_Title(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.TypeGet">
            <summary>Задает оболочка совместимости Document.get_Type()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.TypeSetString">
            <summary>Задает оболочка совместимости Document.set_Type(String value)</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.ShimDocument.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.AnnotationGet">
            <summary>Задает оболочка совместимости Document.get_Annotation()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.AnnotationSetString">
            <summary>Задает оболочка совместимости Document.set_Annotation(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.AuthorGet">
            <summary>Задает оболочка совместимости Document.get_Author()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.AuthorSetString">
            <summary>Задает оболочка совместимости Document.set_Author(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.CoAuthorGet">
            <summary>Задает оболочка совместимости Document.get_CoAuthor()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.CoAuthorSetString">
            <summary>Задает оболочка совместимости Document.set_CoAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.CreateDateGet">
            <summary>Задает оболочка совместимости Document.get_CreateDate()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.CreateDateSetString">
            <summary>Задает оболочка совместимости Document.set_CreateDate(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.ExtensionGet">
            <summary>Задает оболочка совместимости Document.get_Extension()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.ExtensionSetString">
            <summary>Задает оболочка совместимости Document.set_Extension(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.FileSizeGet">
            <summary>Задает оболочка совместимости Document.get_FileSize()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.FileSizeSetInt32">
            <summary>Задает оболочка совместимости Document.set_FileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.FormatGet">
            <summary>Задает оболочка совместимости Document.get_Format()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.FormatSetString">
            <summary>Задает оболочка совместимости Document.set_Format(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.FullTitleGet">
            <summary>Задает оболочка совместимости Document.get_FullTitle()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.FullTitleSetString">
            <summary>Задает оболочка совместимости Document.set_FullTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.IDGet">
            <summary>Задает оболочка совместимости Document.get_ID()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.IDSetInt32">
            <summary>Задает оболочка совместимости Document.set_ID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.InDateGet">
            <summary>Задает оболочка совместимости Document.get_InDate()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.InDateSetString">
            <summary>Задает оболочка совместимости Document.set_InDate(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.KeywordsGet">
            <summary>Задает оболочка совместимости Document.get_Keywords()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.KeywordsSetString">
            <summary>Задает оболочка совместимости Document.set_Keywords(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.NameGet">
            <summary>Задает оболочка совместимости Document.get_Name()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.NameSetString">
            <summary>Задает оболочка совместимости Document.set_Name(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.ShortTitleGet">
            <summary>Задает оболочка совместимости Document.get_ShortTitle()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.ShortTitleSetString">
            <summary>Задает оболочка совместимости Document.set_ShortTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.TitleGet">
            <summary>Задает оболочка совместимости Document.get_Title()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.TitleSetString">
            <summary>Задает оболочка совместимости Document.set_Title(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.TypeGet">
            <summary>Задает оболочка совместимости Document.get_Type()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDocument.AllInstances.TypeSetString">
            <summary>Задает оболочка совместимости Document.set_Type(String value)</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.ShimDownloadedFile">
            <summary>Тип оболочки совместимости для DomainModel.Entity.DownloadedFile</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDownloadedFile.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDownloadedFile.#ctor(DomainModel.Entity.DownloadedFile)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDownloadedFile.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimDownloadedFile.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.Constructor">
            <summary>Задает оболочка совместимости DownloadedFile.DownloadedFile()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.DownloadInt32">
            <summary>Задает оболочка совместимости DownloadedFile.Download(Int32 id)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.DownloadedFileInfoGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_DownloadedFileInfo()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.DownloadedFileInfoSetDocument">
            <summary>Задает оболочка совместимости DownloadedFile.set_DownloadedFileInfo(Document value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.FileContentGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_FileContent()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.FileContentSetByteArray">
            <summary>Задает оболочка совместимости DownloadedFile.set_FileContent(Byte[] value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.FileNameGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_FileName()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.FileNameSetString">
            <summary>Задает оболочка совместимости DownloadedFile.set_FileName(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.FileTypeGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_FileType()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.FileTypeSetString">
            <summary>Задает оболочка совместимости DownloadedFile.set_FileType(String value)</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.DownloadInt32">
            <summary>Задает оболочка совместимости DownloadedFile.Download(Int32 id)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.DownloadedFileInfoGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_DownloadedFileInfo()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.DownloadedFileInfoSetDocument">
            <summary>Задает оболочка совместимости DownloadedFile.set_DownloadedFileInfo(Document value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.FileContentGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_FileContent()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.FileContentSetByteArray">
            <summary>Задает оболочка совместимости DownloadedFile.set_FileContent(Byte[] value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.FileNameGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_FileName()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.FileNameSetString">
            <summary>Задает оболочка совместимости DownloadedFile.set_FileName(String value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.FileTypeGet">
            <summary>Задает оболочка совместимости DownloadedFile.get_FileType()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimDownloadedFile.AllInstances.FileTypeSetString">
            <summary>Задает оболочка совместимости DownloadedFile.set_FileType(String value)</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.ShimdMetaData">
            <summary>Тип оболочки совместимости для DomainModel.Entity.dMetaData</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimdMetaData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimdMetaData.#ctor(DomainModel.Entity.dMetaData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimdMetaData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.ShimdMetaData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.Constructor">
            <summary>Задает оболочка совместимости dMetaData.dMetaData()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.GetMetaData">
            <summary>Задает оболочка совместимости dMetaData.GetMetaData()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.MetaFieldsGet">
            <summary>Задает оболочка совместимости dMetaData.get_MetaFields()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.MetaFieldsSetDocMetaFields">
            <summary>Задает оболочка совместимости dMetaData.set_MetaFields(DocMetaFields value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.SetDomainPathString">
            <summary>Задает оболочка совместимости dMetaData.SetDomainPath(String url)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.SetSecurityStringString">
            <summary>Задает оболочка совместимости dMetaData.SetSecurity(String log, String pwd)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.TypesGet">
            <summary>Задает оболочка совместимости dMetaData.get_Types()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.TypesSetDocTypes">
            <summary>Задает оболочка совместимости dMetaData.set_Types(DocTypes value)</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.GetMetaData">
            <summary>Задает оболочка совместимости dMetaData.GetMetaData()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.MetaFieldsGet">
            <summary>Задает оболочка совместимости dMetaData.get_MetaFields()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.MetaFieldsSetDocMetaFields">
            <summary>Задает оболочка совместимости dMetaData.set_MetaFields(DocMetaFields value)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.SetDomainPathString">
            <summary>Задает оболочка совместимости dMetaData.SetDomainPath(String url)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.SetSecurityStringString">
            <summary>Задает оболочка совместимости dMetaData.SetSecurity(String log, String pwd)</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.TypesGet">
            <summary>Задает оболочка совместимости dMetaData.get_Types()</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.ShimdMetaData.AllInstances.TypesSetDocTypes">
            <summary>Задает оболочка совместимости dMetaData.set_Types(DocTypes value)</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.StubDocument">
            <summary>Тип заглушки DomainModel.Entity.Document</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubDocument.#ctor(DomainModel.DocInfoRef.ContentInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubDocument.#ctor(DomainModel.GetFileRef.FileInfo)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubDocument.#ctor(DomainModel.SearchRef.SearchResults)">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubDocument.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocument</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubDocument.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubDocument.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubDocument.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.StubDownloadedFile">
            <summary>Тип заглушки DomainModel.Entity.DownloadedFile</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubDownloadedFile.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubDownloadedFile.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDownloadedFile</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubDownloadedFile.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubDownloadedFile.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubDownloadedFile.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.Entity.Fakes.StubdMetaData">
            <summary>Тип заглушки DomainModel.Entity.dMetaData</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubdMetaData.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Entity.Fakes.StubdMetaData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubdMetaData</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubdMetaData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubdMetaData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.Entity.Fakes.StubdMetaData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.Fakes.ShimDocInformation">
            <summary>Тип оболочки совместимости для DomainModel.DocInformation</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocInformation.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocInformation.#ctor(DomainModel.DocInformation)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocInformation.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocInformation.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.Constructor">
            <summary>Задает оболочка совместимости DocInformation.DocInformation()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.GetDocInfoInt32">
            <summary>Задает оболочка совместимости DocInformation.GetDocInfo(Int32 id)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.SetDomainPathString">
            <summary>Задает оболочка совместимости DocInformation.SetDomainPath(String url)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.SetSecurityStringString">
            <summary>Задает оболочка совместимости DocInformation.SetSecurity(String log, String pwd)</summary>
        </member>
        <member name="T:DomainModel.Fakes.ShimDocInformation.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.AllInstances.GetDocInfoInt32">
            <summary>Задает оболочка совместимости DocInformation.GetDocInfo(Int32 id)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.AllInstances.SetDomainPathString">
            <summary>Задает оболочка совместимости DocInformation.SetDomainPath(String url)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocInformation.AllInstances.SetSecurityStringString">
            <summary>Задает оболочка совместимости DocInformation.SetSecurity(String log, String pwd)</summary>
        </member>
        <member name="T:DomainModel.Fakes.ShimDocSearch">
            <summary>Тип оболочки совместимости для DomainModel.DocSearch</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocSearch.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocSearch.#ctor(DomainModel.DocSearch)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocSearch.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.Fakes.ShimDocSearch.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.Constructor">
            <summary>Задает оболочка совместимости DocSearch.DocSearch()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.CountRecordsGet">
            <summary>Задает оболочка совместимости DocSearch.get_CountRecords()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.CountRecordsSetInt32">
            <summary>Задает оболочка совместимости DocSearch.set_CountRecords(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.CountResultsGet">
            <summary>Задает оболочка совместимости DocSearch.get_CountResults()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.CountResultsSetInt32">
            <summary>Задает оболочка совместимости DocSearch.set_CountResults(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.RequestStringGet">
            <summary>Задает оболочка совместимости DocSearch.get_RequestString()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.RequestStringSetString">
            <summary>Задает оболочка совместимости DocSearch.set_RequestString(String value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.ResultsGet">
            <summary>Задает оболочка совместимости DocSearch.get_Results()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.SortOrderStringGet">
            <summary>Задает оболочка совместимости DocSearch.get_SortOrderString()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.SortOrderStringSetString">
            <summary>Задает оболочка совместимости DocSearch.set_SortOrderString(String value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.SortValueStringGet">
            <summary>Задает оболочка совместимости DocSearch.get_SortValueString()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.SortValueStringSetString">
            <summary>Задает оболочка совместимости DocSearch.set_SortValueString(String value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.StartSearchStringStringStringInt32">
            <summary>Задает оболочка совместимости DocSearch.StartSearch(String request, String sortValue, String sortOreder, Int32 countRec)</summary>
        </member>
        <member name="T:DomainModel.Fakes.ShimDocSearch.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.CountRecordsGet">
            <summary>Задает оболочка совместимости DocSearch.get_CountRecords()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.CountRecordsSetInt32">
            <summary>Задает оболочка совместимости DocSearch.set_CountRecords(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.CountResultsGet">
            <summary>Задает оболочка совместимости DocSearch.get_CountResults()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.CountResultsSetInt32">
            <summary>Задает оболочка совместимости DocSearch.set_CountResults(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.RequestStringGet">
            <summary>Задает оболочка совместимости DocSearch.get_RequestString()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.RequestStringSetString">
            <summary>Задает оболочка совместимости DocSearch.set_RequestString(String value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.ResultsGet">
            <summary>Задает оболочка совместимости DocSearch.get_Results()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.SortOrderStringGet">
            <summary>Задает оболочка совместимости DocSearch.get_SortOrderString()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.SortOrderStringSetString">
            <summary>Задает оболочка совместимости DocSearch.set_SortOrderString(String value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.SortValueStringGet">
            <summary>Задает оболочка совместимости DocSearch.get_SortValueString()</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.SortValueStringSetString">
            <summary>Задает оболочка совместимости DocSearch.set_SortValueString(String value)</summary>
        </member>
        <member name="P:DomainModel.Fakes.ShimDocSearch.AllInstances.StartSearchStringStringStringInt32">
            <summary>Задает оболочка совместимости DocSearch.StartSearch(String request, String sortValue, String sortOreder, Int32 countRec)</summary>
        </member>
        <member name="T:DomainModel.Fakes.StubDocInformation">
            <summary>Тип заглушки DomainModel.DocInformation</summary>
        </member>
        <member name="M:DomainModel.Fakes.StubDocInformation.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Fakes.StubDocInformation.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocInformation</summary>
        </member>
        <member name="P:DomainModel.Fakes.StubDocInformation.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.Fakes.StubDocInformation.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.Fakes.StubDocInformation.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.Fakes.StubDocSearch">
            <summary>Тип заглушки DomainModel.DocSearch</summary>
        </member>
        <member name="M:DomainModel.Fakes.StubDocSearch.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.Fakes.StubDocSearch.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocSearch</summary>
        </member>
        <member name="P:DomainModel.Fakes.StubDocSearch.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.Fakes.StubDocSearch.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.Fakes.StubDocSearch.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimFileInfo">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.FileInfo</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimFileInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimFileInfo.#ctor(DomainModel.GetFileRef.FileInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimFileInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimFileInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.Constructor">
            <summary>Задает оболочка совместимости FileInfo.FileInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.CustomDocMetaDataGet">
            <summary>Задает оболочка совместимости FileInfo.get_CustomDocMetaData()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.CustomDocMetaDataSetIdcPropertyArray">
            <summary>Задает оболочка совместимости FileInfo.set_CustomDocMetaData(IdcProperty[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dCheckoutUserGet">
            <summary>Задает оболочка совместимости FileInfo.get_dCheckoutUser()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dCheckoutUserSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dCheckoutUser(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dCreateDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dCreateDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dCreateDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dCreateDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocAccountGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocAccount()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocAccountSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocAccount(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocAuthorGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocAuthor()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocAuthorSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dDocID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dDocIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocNameGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocNameSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocTitleGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocTitle()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocTitleSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocTypeGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dDocTypeSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dExtensionGet">
            <summary>Задает оболочка совместимости FileInfo.get_dExtension()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dExtensionSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFileSizeGet">
            <summary>Задает оболочка совместимости FileInfo.get_dFileSize()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFileSizeSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFlag1Get">
            <summary>Задает оболочка совместимости FileInfo.get_dFlag1()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFlag1SetString">
            <summary>Задает оболочка совместимости FileInfo.set_dFlag1(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFormatGet">
            <summary>Задает оболочка совместимости FileInfo.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dFormatSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dInDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dInDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIndexerStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIndexerState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIndexerStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dIndexerState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsCheckedOutGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsCheckedOut()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsCheckedOutSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsCheckedOut(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsCheckedOutSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsCheckedOutSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsCheckedOutSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsCheckedOutSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsPrimaryGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsPrimary()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsPrimarySetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsPrimary(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsPrimarySpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsPrimarySpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsPrimarySpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsPrimarySpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsWebFormatGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsWebFormat()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsWebFormatSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsWebFormat(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsWebFormatSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsWebFormatSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dIsWebFormatSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsWebFormatSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dLocationGet">
            <summary>Задает оболочка совместимости FileInfo.get_dLocation()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dLocationSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dLocation(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dMessageGet">
            <summary>Задает оболочка совместимости FileInfo.get_dMessage()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dMessageSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dMessage(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dOriginalNameGet">
            <summary>Задает оболочка совместимости FileInfo.get_dOriginalName()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dOriginalNameSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dOriginalName(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dOutDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dOutDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dProcessingStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dProcessingState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dProcessingStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dProcessingState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dPublishStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dPublishState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dPublishStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dPublishState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dPublishTypeGet">
            <summary>Задает оболочка совместимости FileInfo.get_dPublishType()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dPublishTypeSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dPublishType(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dReleaseDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dReleaseDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dReleaseDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dReleaseDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dReleaseStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dReleaseState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dReleaseStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dReleaseState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRendition1Get">
            <summary>Задает оболочка совместимости FileInfo.get_dRendition1()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRendition1SetString">
            <summary>Задает оболочка совместимости FileInfo.set_dRendition1(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRendition2Get">
            <summary>Задает оболочка совместимости FileInfo.get_dRendition2()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRendition2SetString">
            <summary>Задает оболочка совместимости FileInfo.set_dRendition2(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevClassIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevClassID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevClassIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dRevClassID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevClassIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevClassIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevClassIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dRevClassIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevLabelGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevLabelSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevisionIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dSecurityGroupGet">
            <summary>Задает оболочка совместимости FileInfo.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dStatusGet">
            <summary>Задает оболочка совместимости FileInfo.get_dStatus()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dStatusSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dStatus(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dWebExtensionGet">
            <summary>Задает оболочка совместимости FileInfo.get_dWebExtension()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.dWebExtensionSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dWebExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocAnnotationGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocAnnotation()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocAnnotationSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocAnnotation(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocAuthorsTPU_FIOGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocAuthorsTPU_FIO()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocAuthorsTPU_FIOSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocAuthorsTPU_FIO(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocCaptionGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocCaptionSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocCoAuthorsGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocCoAuthors()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocCoAuthorsSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocCoAuthors(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocKeyWordsGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocKeyWords()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.xDocKeyWordsSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocKeyWords(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.CustomDocMetaDataGet">
            <summary>Задает оболочка совместимости FileInfo.get_CustomDocMetaData()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.CustomDocMetaDataSetIdcPropertyArray">
            <summary>Задает оболочка совместимости FileInfo.set_CustomDocMetaData(IdcProperty[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dCheckoutUserGet">
            <summary>Задает оболочка совместимости FileInfo.get_dCheckoutUser()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dCheckoutUserSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dCheckoutUser(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dCreateDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dCreateDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dCreateDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dCreateDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocAccountGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocAccount()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocAccountSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocAccount(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocAuthorGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocAuthor()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocAuthorSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dDocID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dDocIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocNameGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocNameSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocTitleGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocTitle()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocTitleSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocTypeGet">
            <summary>Задает оболочка совместимости FileInfo.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dDocTypeSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dExtensionGet">
            <summary>Задает оболочка совместимости FileInfo.get_dExtension()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dExtensionSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFileSizeGet">
            <summary>Задает оболочка совместимости FileInfo.get_dFileSize()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFileSizeSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFlag1Get">
            <summary>Задает оболочка совместимости FileInfo.get_dFlag1()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFlag1SetString">
            <summary>Задает оболочка совместимости FileInfo.set_dFlag1(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFormatGet">
            <summary>Задает оболочка совместимости FileInfo.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dFormatSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dInDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dInDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIndexerStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIndexerState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIndexerStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dIndexerState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsCheckedOutGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsCheckedOut()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsCheckedOutSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsCheckedOut(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsCheckedOutSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsCheckedOutSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsCheckedOutSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsCheckedOutSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsPrimaryGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsPrimary()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsPrimarySetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsPrimary(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsPrimarySpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsPrimarySpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsPrimarySpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsPrimarySpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsWebFormatGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsWebFormat()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsWebFormatSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsWebFormat(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsWebFormatSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dIsWebFormatSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dIsWebFormatSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dIsWebFormatSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dLocationGet">
            <summary>Задает оболочка совместимости FileInfo.get_dLocation()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dLocationSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dLocation(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dMessageGet">
            <summary>Задает оболочка совместимости FileInfo.get_dMessage()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dMessageSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dMessage(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dOriginalNameGet">
            <summary>Задает оболочка совместимости FileInfo.get_dOriginalName()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dOriginalNameSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dOriginalName(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dOutDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dOutDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dProcessingStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dProcessingState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dProcessingStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dProcessingState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dPublishStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dPublishState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dPublishStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dPublishState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dPublishTypeGet">
            <summary>Задает оболочка совместимости FileInfo.get_dPublishType()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dPublishTypeSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dPublishType(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dReleaseDateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dReleaseDate()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dReleaseDateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dReleaseDate(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dReleaseStateGet">
            <summary>Задает оболочка совместимости FileInfo.get_dReleaseState()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dReleaseStateSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dReleaseState(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRendition1Get">
            <summary>Задает оболочка совместимости FileInfo.get_dRendition1()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRendition1SetString">
            <summary>Задает оболочка совместимости FileInfo.set_dRendition1(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRendition2Get">
            <summary>Задает оболочка совместимости FileInfo.get_dRendition2()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRendition2SetString">
            <summary>Задает оболочка совместимости FileInfo.set_dRendition2(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevClassIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevClassID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevClassIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dRevClassID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevClassIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevClassIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevClassIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dRevClassIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevLabelGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevLabelSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevisionIDGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости FileInfo.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости FileInfo.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости FileInfo.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dSecurityGroupGet">
            <summary>Задает оболочка совместимости FileInfo.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dStatusGet">
            <summary>Задает оболочка совместимости FileInfo.get_dStatus()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dStatusSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dStatus(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dWebExtensionGet">
            <summary>Задает оболочка совместимости FileInfo.get_dWebExtension()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.dWebExtensionSetString">
            <summary>Задает оболочка совместимости FileInfo.set_dWebExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocAnnotationGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocAnnotation()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocAnnotationSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocAnnotation(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocAuthorsTPU_FIOGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocAuthorsTPU_FIO()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocAuthorsTPU_FIOSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocAuthorsTPU_FIO(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocCaptionGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocCaptionSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocCoAuthorsGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocCoAuthors()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocCoAuthorsSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocCoAuthors(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocKeyWordsGet">
            <summary>Задает оболочка совместимости FileInfo.get_xDocKeyWords()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimFileInfo.AllInstances.xDocKeyWordsSetString">
            <summary>Задает оболочка совместимости FileInfo.set_xDocKeyWords(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFile">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.GetFile</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFile.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFile.#ctor(DomainModel.GetFileRef.GetFile)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFile.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFile.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFile.Bind(System.ComponentModel.IComponent)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFile.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.CancelAsyncObject">
            <summary>Задает оболочка совместимости GetFile.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.Constructor">
            <summary>Задает оболочка совместимости GetFile.GetFile()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByIDAsyncInt32BooleanStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByIDAsync(Int32 dID, Boolean dIDSpecified, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByIDAsyncInt32BooleanStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости GetFile.GetFileByIDAsync(Int32 dID, Boolean dIDSpecified, String rendition, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByIDCompletedAddGetFileByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.add_GetFileByIDCompleted(GetFileByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByIDCompletedRemoveGetFileByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.remove_GetFileByIDCompleted(GetFileByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByIDInt32BooleanStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByID(Int32 dID, Boolean dIDSpecified, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByNameAsyncStringStringStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByNameAsync(String dDocName, String revisionSelectionMethod, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByNameAsyncStringStringStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости GetFile.GetFileByNameAsync(String dDocName, String revisionSelectionMethod, String rendition, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByNameCompletedAddGetFileByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.add_GetFileByNameCompleted(GetFileByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByNameCompletedRemoveGetFileByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.remove_GetFileByNameCompleted(GetFileByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.GetFileByNameStringStringStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByName(String dDocName, String revisionSelectionMethod, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости GetFile.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.OnGetFileByIDOperationCompletedObject">
            <summary>Задает оболочка совместимости GetFile.OnGetFileByIDOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.OnGetFileByNameOperationCompletedObject">
            <summary>Задает оболочка совместимости GetFile.OnGetFileByNameOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.UrlGet">
            <summary>Задает оболочка совместимости GetFile.get_Url()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.UrlSetString">
            <summary>Задает оболочка совместимости GetFile.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости GetFile.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости GetFile.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.CancelAsyncObject">
            <summary>Задает оболочка совместимости GetFile.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByIDAsyncInt32BooleanStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByIDAsync(Int32 dID, Boolean dIDSpecified, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByIDAsyncInt32BooleanStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости GetFile.GetFileByIDAsync(Int32 dID, Boolean dIDSpecified, String rendition, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByIDCompletedAddGetFileByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.add_GetFileByIDCompleted(GetFileByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByIDCompletedRemoveGetFileByIDCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.remove_GetFileByIDCompleted(GetFileByIDCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByIDInt32BooleanStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByID(Int32 dID, Boolean dIDSpecified, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByNameAsyncStringStringStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByNameAsync(String dDocName, String revisionSelectionMethod, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByNameAsyncStringStringStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости GetFile.GetFileByNameAsync(String dDocName, String revisionSelectionMethod, String rendition, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByNameCompletedAddGetFileByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.add_GetFileByNameCompleted(GetFileByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByNameCompletedRemoveGetFileByNameCompletedEventHandler">
            <summary>Задает оболочка совместимости GetFile.remove_GetFileByNameCompleted(GetFileByNameCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.GetFileByNameStringStringStringIdcPropertyArray">
            <summary>Задает оболочка совместимости GetFile.GetFileByName(String dDocName, String revisionSelectionMethod, String rendition, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости GetFile.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.OnGetFileByIDOperationCompletedObject">
            <summary>Задает оболочка совместимости GetFile.OnGetFileByIDOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.OnGetFileByNameOperationCompletedObject">
            <summary>Задает оболочка совместимости GetFile.OnGetFileByNameOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.UrlGet">
            <summary>Задает оболочка совместимости GetFile.get_Url()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.UrlSetString">
            <summary>Задает оболочка совместимости GetFile.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости GetFile.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFile.AllInstances.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости GetFile.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.GetFileByIDCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.#ctor(DomainModel.GetFileRef.GetFileByIDCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости GetFileByIDCompletedEventArgs.GetFileByIDCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости GetFileByIDCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости GetFileByIDCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.GetFileByIDResult</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.#ctor(DomainModel.GetFileRef.GetFileByIDResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.Constructor">
            <summary>Задает оболочка совместимости GetFileByIDResult.GetFileByIDResult()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.FileInfoGet">
            <summary>Задает оболочка совместимости GetFileByIDResult.get_FileInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.FileInfoSetFileInfoArray">
            <summary>Задает оболочка совместимости GetFileByIDResult.set_FileInfo(FileInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.StatusInfoGet">
            <summary>Задает оболочка совместимости GetFileByIDResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости GetFileByIDResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.downloadFileGet">
            <summary>Задает оболочка совместимости GetFileByIDResult.get_downloadFile()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.downloadFileSetIdcFile">
            <summary>Задает оболочка совместимости GetFileByIDResult.set_downloadFile(IdcFile value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances.FileInfoGet">
            <summary>Задает оболочка совместимости GetFileByIDResult.get_FileInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances.FileInfoSetFileInfoArray">
            <summary>Задает оболочка совместимости GetFileByIDResult.set_FileInfo(FileInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости GetFileByIDResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости GetFileByIDResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances.downloadFileGet">
            <summary>Задает оболочка совместимости GetFileByIDResult.get_downloadFile()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByIDResult.AllInstances.downloadFileSetIdcFile">
            <summary>Задает оболочка совместимости GetFileByIDResult.set_downloadFile(IdcFile value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.GetFileByNameCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.#ctor(DomainModel.GetFileRef.GetFileByNameCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости GetFileByNameCompletedEventArgs.GetFileByNameCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости GetFileByNameCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости GetFileByNameCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.GetFileByNameResult</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.#ctor(DomainModel.GetFileRef.GetFileByNameResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.Constructor">
            <summary>Задает оболочка совместимости GetFileByNameResult.GetFileByNameResult()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.FileInfoGet">
            <summary>Задает оболочка совместимости GetFileByNameResult.get_FileInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.FileInfoSetFileInfoArray">
            <summary>Задает оболочка совместимости GetFileByNameResult.set_FileInfo(FileInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.StatusInfoGet">
            <summary>Задает оболочка совместимости GetFileByNameResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости GetFileByNameResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.downloadFileGet">
            <summary>Задает оболочка совместимости GetFileByNameResult.get_downloadFile()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.downloadFileSetIdcFile">
            <summary>Задает оболочка совместимости GetFileByNameResult.set_downloadFile(IdcFile value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances.FileInfoGet">
            <summary>Задает оболочка совместимости GetFileByNameResult.get_FileInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances.FileInfoSetFileInfoArray">
            <summary>Задает оболочка совместимости GetFileByNameResult.set_FileInfo(FileInfo[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости GetFileByNameResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости GetFileByNameResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances.downloadFileGet">
            <summary>Задает оболочка совместимости GetFileByNameResult.get_downloadFile()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimGetFileByNameResult.AllInstances.downloadFileSetIdcFile">
            <summary>Задает оболочка совместимости GetFileByNameResult.set_downloadFile(IdcFile value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimIdcFile">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.IdcFile</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcFile.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcFile.#ctor(DomainModel.GetFileRef.IdcFile)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcFile.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcFile.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.Constructor">
            <summary>Задает оболочка совместимости IdcFile.IdcFile()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.fileContentGet">
            <summary>Задает оболочка совместимости IdcFile.get_fileContent()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.fileContentSetByteArray">
            <summary>Задает оболочка совместимости IdcFile.set_fileContent(Byte[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.fileNameGet">
            <summary>Задает оболочка совместимости IdcFile.get_fileName()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.fileNameSetString">
            <summary>Задает оболочка совместимости IdcFile.set_fileName(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimIdcFile.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.AllInstances.fileContentGet">
            <summary>Задает оболочка совместимости IdcFile.get_fileContent()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.AllInstances.fileContentSetByteArray">
            <summary>Задает оболочка совместимости IdcFile.set_fileContent(Byte[] value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.AllInstances.fileNameGet">
            <summary>Задает оболочка совместимости IdcFile.get_fileName()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcFile.AllInstances.fileNameSetString">
            <summary>Задает оболочка совместимости IdcFile.set_fileName(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimIdcProperty">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcProperty.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcProperty.#ctor(DomainModel.GetFileRef.IdcProperty)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcProperty.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimIdcProperty.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.Constructor">
            <summary>Задает оболочка совместимости IdcProperty.IdcProperty()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimIdcProperty.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.AllInstances.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.AllInstances.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.AllInstances.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimIdcProperty.AllInstances.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimStatusInfo">
            <summary>Тип оболочки совместимости для DomainModel.GetFileRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimStatusInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimStatusInfo.#ctor(DomainModel.GetFileRef.StatusInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimStatusInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.ShimStatusInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.Constructor">
            <summary>Задает оболочка совместимости StatusInfo.StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.ShimStatusInfo.AllInstances.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubFileInfo">
            <summary>Тип заглушки DomainModel.GetFileRef.FileInfo</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubFileInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubFileInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubFileInfo</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubFileInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubFileInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubFileInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubGetFile">
            <summary>Тип заглушки DomainModel.GetFileRef.GetFile</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.Abort">
            <summary>Задает заглушка WebClientProtocol.Abort()</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.Abort01">
            <summary>Задает stub WebClientProtocol.Abort()</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.AttachBackingFieldToSite">
            <summary>Присоединение делегатов для эмуляции StubGetFile.Site как свойства с резервным полем.</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.CanRaiseEventsGet">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.Dispose(System.Boolean)">
            <summary>Задает заглушка Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.DisposeBoolean">
            <summary>Задает stub Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.GetReaderForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.GetService(System.Type)">
            <summary>Задает заглушка Component.GetService(Type service)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.GetServiceType">
            <summary>Задает stub Component.GetService(Type service)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.GetWebRequest(System.Uri)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.GetWebRequestUri">
            <summary>Задает stub SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.GetWebResponse(System.Net.WebRequest)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.GetWebResponseWebRequest">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.GetWebResponseWebRequestIAsyncResult">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.GetWriterForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubGetFile</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.SiteGet">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.SiteSetISite">
            <summary>Задает stub Component.set_Site(ISite value)</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFile.ToString">
            <summary>Задает заглушка Component.ToString()</summary>
        </member>
        <member name="F:DomainModel.GetFileRef.Fakes.StubGetFile.ToString01">
            <summary>Задает stub Component.ToString()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFile.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFile.CanRaiseEvents">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFile.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFile.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFile.Site">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubGetFileByIDResult">
            <summary>Тип заглушки DomainModel.GetFileRef.GetFileByIDResult</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFileByIDResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFileByIDResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubGetFileByIDResult</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFileByIDResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFileByIDResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFileByIDResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubGetFileByNameResult">
            <summary>Тип заглушки DomainModel.GetFileRef.GetFileByNameResult</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFileByNameResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubGetFileByNameResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubGetFileByNameResult</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFileByNameResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFileByNameResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubGetFileByNameResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubIdcFile">
            <summary>Тип заглушки DomainModel.GetFileRef.IdcFile</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubIdcFile.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubIdcFile.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIdcFile</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubIdcFile.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubIdcFile.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubIdcFile.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubIdcProperty">
            <summary>Тип заглушки DomainModel.GetFileRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubIdcProperty.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubIdcProperty.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIdcProperty</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubIdcProperty.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubIdcProperty.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubIdcProperty.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.GetFileRef.Fakes.StubStatusInfo">
            <summary>Тип заглушки DomainModel.GetFileRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubStatusInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.GetFileRef.Fakes.StubStatusInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubStatusInfo</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubStatusInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubStatusInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.GetFileRef.Fakes.StubStatusInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.DocMetaDataCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.#ctor(DomainModel.MetaDataRef.DocMetaDataCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости DocMetaDataCompletedEventArgs.DocMetaDataCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости DocMetaDataCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости DocMetaDataCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.DocMetaDataResult</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.#ctor(DomainModel.MetaDataRef.DocMetaDataResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AccountsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_Accounts()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AccountsSetStringArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_Accounts(String[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.Constructor">
            <summary>Задает оболочка совместимости DocMetaDataResult.DocMetaDataResult()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.DocMetaFieldsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_DocMetaFields()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.DocMetaFieldsSetDocMetaFieldsArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_DocMetaFields(DocMetaFields[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.DocTypesGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_DocTypes()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.DocTypesSetDocTypesArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_DocTypes(DocTypes[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.SecurityGroupsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_SecurityGroups()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.SecurityGroupsSetStringArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_SecurityGroups(String[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.StatusInfoGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.isAutoNumberGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_isAutoNumber()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.isAutoNumberSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_isAutoNumber(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.isAutoNumberSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_isAutoNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.isAutoNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_isAutoNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.useAccountsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_useAccounts()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.useAccountsSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_useAccounts(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.useAccountsSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_useAccountsSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.useAccountsSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_useAccountsSpecified(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.AccountsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_Accounts()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.AccountsSetStringArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_Accounts(String[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.DocMetaFieldsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_DocMetaFields()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.DocMetaFieldsSetDocMetaFieldsArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_DocMetaFields(DocMetaFields[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.DocTypesGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_DocTypes()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.DocTypesSetDocTypesArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_DocTypes(DocTypes[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.SecurityGroupsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_SecurityGroups()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.SecurityGroupsSetStringArray">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_SecurityGroups(String[] value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.isAutoNumberGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_isAutoNumber()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.isAutoNumberSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_isAutoNumber(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.isAutoNumberSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_isAutoNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.isAutoNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_isAutoNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.useAccountsGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_useAccounts()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.useAccountsSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_useAccounts(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.useAccountsSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaDataResult.get_useAccountsSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaDataResult.AllInstances.useAccountsSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaDataResult.set_useAccountsSpecified(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.DocMetaFields</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.#ctor(DomainModel.MetaDataRef.DocMetaFields)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.Constructor">
            <summary>Задает оболочка совместимости DocMetaFields.DocMetaFields()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dCaptionGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dCaption()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dCaptionSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dDefaultValueGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dDefaultValue()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dDefaultValueSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dDefaultValue(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsEnabledGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsEnabled()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsEnabledSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsEnabled(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsEnabledSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsEnabledSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsEnabledSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsEnabledSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsOptionListGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsOptionList()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsOptionListSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsOptionList(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsOptionListSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsOptionListSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsOptionListSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsOptionListSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsRequiredGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsRequired()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsRequiredSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsRequired(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsRequiredSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsRequiredSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsRequiredSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsRequiredSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsSearchableGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsSearchable()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsSearchableSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsSearchable(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsSearchableSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsSearchableSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dIsSearchableSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsSearchableSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dNameGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dName()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dNameSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dName(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOptionListKeyGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOptionListKey()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOptionListKeySetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOptionListKey(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOptionListTypeGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOptionListType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOptionListTypeSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOptionListType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOptionListValuesGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOptionListValues()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOptionListValuesSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOptionListValues(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOrderGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOrder()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOrderSetInt32">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOrder(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOrderSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOrderSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dOrderSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOrderSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dTypeGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.dTypeSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.xDocCaptionGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.xDocCaptionSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_xDocCaption(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dCaptionGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dCaption()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dCaptionSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dDefaultValueGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dDefaultValue()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dDefaultValueSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dDefaultValue(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsEnabledGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsEnabled()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsEnabledSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsEnabled(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsEnabledSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsEnabledSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsEnabledSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsEnabledSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsOptionListGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsOptionList()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsOptionListSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsOptionList(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsOptionListSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsOptionListSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsOptionListSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsOptionListSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsRequiredGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsRequired()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsRequiredSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsRequired(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsRequiredSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsRequiredSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsRequiredSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsRequiredSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsSearchableGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsSearchable()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsSearchableSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsSearchable(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsSearchableSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dIsSearchableSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dIsSearchableSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dIsSearchableSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dNameGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dName()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dNameSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dName(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOptionListKeyGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOptionListKey()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOptionListKeySetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOptionListKey(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOptionListTypeGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOptionListType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOptionListTypeSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOptionListType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOptionListValuesGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOptionListValues()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOptionListValuesSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOptionListValues(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOrderGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOrder()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOrderSetInt32">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOrder(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOrderSpecifiedGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dOrderSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dOrderSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости DocMetaFields.set_dOrderSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dTypeGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_dType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.dTypeSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_dType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.xDocCaptionGet">
            <summary>Задает оболочка совместимости DocMetaFields.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocMetaFields.AllInstances.xDocCaptionSetString">
            <summary>Задает оболочка совместимости DocMetaFields.set_xDocCaption(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocTypes">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.DocTypes</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocTypes.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocTypes.#ctor(DomainModel.MetaDataRef.DocTypes)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocTypes.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimDocTypes.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.Constructor">
            <summary>Задает оболочка совместимости DocTypes.DocTypes()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.dDescriptionGet">
            <summary>Задает оболочка совместимости DocTypes.get_dDescription()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.dDescriptionSetString">
            <summary>Задает оболочка совместимости DocTypes.set_dDescription(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.dDocTypeGet">
            <summary>Задает оболочка совместимости DocTypes.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.dDocTypeSetString">
            <summary>Задает оболочка совместимости DocTypes.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.dGifGet">
            <summary>Задает оболочка совместимости DocTypes.get_dGif()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.dGifSetString">
            <summary>Задает оболочка совместимости DocTypes.set_dGif(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances.dDescriptionGet">
            <summary>Задает оболочка совместимости DocTypes.get_dDescription()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances.dDescriptionSetString">
            <summary>Задает оболочка совместимости DocTypes.set_dDescription(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances.dDocTypeGet">
            <summary>Задает оболочка совместимости DocTypes.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances.dDocTypeSetString">
            <summary>Задает оболочка совместимости DocTypes.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances.dGifGet">
            <summary>Задает оболочка совместимости DocTypes.get_dGif()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimDocTypes.AllInstances.dGifSetString">
            <summary>Задает оболочка совместимости DocTypes.set_dGif(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimIdcProperty">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.#ctor(DomainModel.MetaDataRef.IdcProperty)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.Constructor">
            <summary>Задает оболочка совместимости IdcProperty.IdcProperty()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.AllInstances.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.AllInstances.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.AllInstances.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimIdcProperty.AllInstances.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimMetaData">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.MetaData</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimMetaData.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimMetaData.#ctor(DomainModel.MetaDataRef.MetaData)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimMetaData.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimMetaData.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimMetaData.Bind(System.ComponentModel.IComponent)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimMetaData.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.CancelAsyncObject">
            <summary>Задает оболочка совместимости MetaData.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.Constructor">
            <summary>Задает оболочка совместимости MetaData.MetaData()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.DocMetaDataAsyncInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.DocMetaDataAsync(Int32 privilege, Boolean privilegeSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.DocMetaDataAsyncInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости MetaData.DocMetaDataAsync(Int32 privilege, Boolean privilegeSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.DocMetaDataCompletedAddDocMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.add_DocMetaDataCompleted(DocMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.DocMetaDataCompletedRemoveDocMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.remove_DocMetaDataCompleted(DocMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.DocMetaDataInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.DocMetaData(Int32 privilege, Boolean privilegeSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости MetaData.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.OnDocMetaDataOperationCompletedObject">
            <summary>Задает оболочка совместимости MetaData.OnDocMetaDataOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.OnUserMetaDataOperationCompletedObject">
            <summary>Задает оболочка совместимости MetaData.OnUserMetaDataOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UrlGet">
            <summary>Задает оболочка совместимости MetaData.get_Url()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UrlSetString">
            <summary>Задает оболочка совместимости MetaData.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости MetaData.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости MetaData.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UserMetaDataAsyncIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.UserMetaDataAsync(IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UserMetaDataAsyncIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости MetaData.UserMetaDataAsync(IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UserMetaDataCompletedAddUserMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.add_UserMetaDataCompleted(UserMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UserMetaDataCompletedRemoveUserMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.remove_UserMetaDataCompleted(UserMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.UserMetaDataIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.UserMetaData(IdcProperty[] extraProps)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.CancelAsyncObject">
            <summary>Задает оболочка совместимости MetaData.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.DocMetaDataAsyncInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.DocMetaDataAsync(Int32 privilege, Boolean privilegeSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.DocMetaDataAsyncInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости MetaData.DocMetaDataAsync(Int32 privilege, Boolean privilegeSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.DocMetaDataCompletedAddDocMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.add_DocMetaDataCompleted(DocMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.DocMetaDataCompletedRemoveDocMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.remove_DocMetaDataCompleted(DocMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.DocMetaDataInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.DocMetaData(Int32 privilege, Boolean privilegeSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости MetaData.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.OnDocMetaDataOperationCompletedObject">
            <summary>Задает оболочка совместимости MetaData.OnDocMetaDataOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.OnUserMetaDataOperationCompletedObject">
            <summary>Задает оболочка совместимости MetaData.OnUserMetaDataOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UrlGet">
            <summary>Задает оболочка совместимости MetaData.get_Url()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UrlSetString">
            <summary>Задает оболочка совместимости MetaData.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости MetaData.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости MetaData.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UserMetaDataAsyncIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.UserMetaDataAsync(IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UserMetaDataAsyncIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости MetaData.UserMetaDataAsync(IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UserMetaDataCompletedAddUserMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.add_UserMetaDataCompleted(UserMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UserMetaDataCompletedRemoveUserMetaDataCompletedEventHandler">
            <summary>Задает оболочка совместимости MetaData.remove_UserMetaDataCompleted(UserMetaDataCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimMetaData.AllInstances.UserMetaDataIdcPropertyArray">
            <summary>Задает оболочка совместимости MetaData.UserMetaData(IdcProperty[] extraProps)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimStatusInfo">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.#ctor(DomainModel.MetaDataRef.StatusInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.Constructor">
            <summary>Задает оболочка совместимости StatusInfo.StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimStatusInfo.AllInstances.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.UserMetaDataCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.#ctor(DomainModel.MetaDataRef.UserMetaDataCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости UserMetaDataCompletedEventArgs.UserMetaDataCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости UserMetaDataCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости UserMetaDataCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.UserMetaDataResult</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.#ctor(DomainModel.MetaDataRef.UserMetaDataResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.Constructor">
            <summary>Задает оболочка совместимости UserMetaDataResult.UserMetaDataResult()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.StatusInfoGet">
            <summary>Задает оболочка совместимости UserMetaDataResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости UserMetaDataResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.UserMetaFieldsGet">
            <summary>Задает оболочка совместимости UserMetaDataResult.get_UserMetaFields()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.UserMetaFieldsSetUserMetaFieldsArray">
            <summary>Задает оболочка совместимости UserMetaDataResult.set_UserMetaFields(UserMetaFields[] value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости UserMetaDataResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости UserMetaDataResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.AllInstances.UserMetaFieldsGet">
            <summary>Задает оболочка совместимости UserMetaDataResult.get_UserMetaFields()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaDataResult.AllInstances.UserMetaFieldsSetUserMetaFieldsArray">
            <summary>Задает оболочка совместимости UserMetaDataResult.set_UserMetaFields(UserMetaFields[] value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields">
            <summary>Тип оболочки совместимости для DomainModel.MetaDataRef.UserMetaFields</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.#ctor(DomainModel.MetaDataRef.UserMetaFields)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.Constructor">
            <summary>Задает оболочка совместимости UserMetaFields.UserMetaFields()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdCaptionGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdCaption()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdCaptionSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsAdminEditGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsAdminEdit()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsAdminEditSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsAdminEdit(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsAdminEditSpecifiedGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsAdminEditSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsAdminEditSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsAdminEditSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsOptionListGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsOptionList()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsOptionListSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsOptionList(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsOptionListSpecifiedGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsOptionListSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsOptionListSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsOptionListSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsViewOnlyGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsViewOnly()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsViewOnlySetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsViewOnly(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsViewOnlySpecifiedGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsViewOnlySpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdIsViewOnlySpecifiedSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsViewOnlySpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdNameGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdName()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdNameSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdName(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOptionListKeyGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOptionListKey()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOptionListKeySetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOptionListKey(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOptionListTypeGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOptionListType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOptionListTypeSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOptionListType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOptionListValuesGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOptionListValues()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOptionListValuesSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOptionListValues(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOverrideBitFlagGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOverrideBitFlag()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdOverrideBitFlagSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOverrideBitFlag(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdTypeGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.umdTypeSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdType(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdCaptionGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdCaption()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdCaptionSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsAdminEditGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsAdminEdit()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsAdminEditSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsAdminEdit(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsAdminEditSpecifiedGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsAdminEditSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsAdminEditSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsAdminEditSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsOptionListGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsOptionList()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsOptionListSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsOptionList(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsOptionListSpecifiedGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsOptionListSpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsOptionListSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsOptionListSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsViewOnlyGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsViewOnly()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsViewOnlySetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsViewOnly(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsViewOnlySpecifiedGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdIsViewOnlySpecified()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdIsViewOnlySpecifiedSetBoolean">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdIsViewOnlySpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdNameGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdName()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdNameSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdName(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOptionListKeyGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOptionListKey()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOptionListKeySetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOptionListKey(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOptionListTypeGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOptionListType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOptionListTypeSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOptionListType(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOptionListValuesGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOptionListValues()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOptionListValuesSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOptionListValues(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOverrideBitFlagGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdOverrideBitFlag()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdOverrideBitFlagSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdOverrideBitFlag(String value)</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdTypeGet">
            <summary>Задает оболочка совместимости UserMetaFields.get_umdType()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.ShimUserMetaFields.AllInstances.umdTypeSetString">
            <summary>Задает оболочка совместимости UserMetaFields.set_umdType(String value)</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubDocMetaDataResult">
            <summary>Тип заглушки DomainModel.MetaDataRef.DocMetaDataResult</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubDocMetaDataResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubDocMetaDataResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocMetaDataResult</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocMetaDataResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocMetaDataResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocMetaDataResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubDocMetaFields">
            <summary>Тип заглушки DomainModel.MetaDataRef.DocMetaFields</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubDocMetaFields.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubDocMetaFields.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocMetaFields</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocMetaFields.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocMetaFields.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocMetaFields.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubDocTypes">
            <summary>Тип заглушки DomainModel.MetaDataRef.DocTypes</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubDocTypes.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubDocTypes.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubDocTypes</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocTypes.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocTypes.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubDocTypes.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubIdcProperty">
            <summary>Тип заглушки DomainModel.MetaDataRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubIdcProperty.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubIdcProperty.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIdcProperty</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubIdcProperty.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubIdcProperty.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubIdcProperty.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubMetaData">
            <summary>Тип заглушки DomainModel.MetaDataRef.MetaData</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.Abort">
            <summary>Задает заглушка WebClientProtocol.Abort()</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.Abort01">
            <summary>Задает stub WebClientProtocol.Abort()</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.AttachBackingFieldToSite">
            <summary>Присоединение делегатов для эмуляции StubMetaData.Site как свойства с резервным полем.</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.CanRaiseEventsGet">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.Dispose(System.Boolean)">
            <summary>Задает заглушка Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.DisposeBoolean">
            <summary>Задает stub Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.GetReaderForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.GetService(System.Type)">
            <summary>Задает заглушка Component.GetService(Type service)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.GetServiceType">
            <summary>Задает stub Component.GetService(Type service)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWebRequest(System.Uri)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWebRequestUri">
            <summary>Задает stub SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWebResponse(System.Net.WebRequest)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWebResponseWebRequest">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWebResponseWebRequestIAsyncResult">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.GetWriterForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubMetaData</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.SiteGet">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.SiteSetISite">
            <summary>Задает stub Component.set_Site(ISite value)</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubMetaData.ToString">
            <summary>Задает заглушка Component.ToString()</summary>
        </member>
        <member name="F:DomainModel.MetaDataRef.Fakes.StubMetaData.ToString01">
            <summary>Задает stub Component.ToString()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubMetaData.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubMetaData.CanRaiseEvents">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubMetaData.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubMetaData.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubMetaData.Site">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubStatusInfo">
            <summary>Тип заглушки DomainModel.MetaDataRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubStatusInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubStatusInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubStatusInfo</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubStatusInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubStatusInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubStatusInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubUserMetaDataResult">
            <summary>Тип заглушки DomainModel.MetaDataRef.UserMetaDataResult</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubUserMetaDataResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubUserMetaDataResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubUserMetaDataResult</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubUserMetaDataResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubUserMetaDataResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubUserMetaDataResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.MetaDataRef.Fakes.StubUserMetaFields">
            <summary>Тип заглушки DomainModel.MetaDataRef.UserMetaFields</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubUserMetaFields.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.MetaDataRef.Fakes.StubUserMetaFields.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubUserMetaFields</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubUserMetaFields.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubUserMetaFields.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.MetaDataRef.Fakes.StubUserMetaFields.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.AdvancedSearchCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.#ctor(DomainModel.SearchRef.AdvancedSearchCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости AdvancedSearchCompletedEventArgs.AdvancedSearchCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости AdvancedSearchCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости AdvancedSearchCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.AdvancedSearchResult</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.#ctor(DomainModel.SearchRef.AdvancedSearchResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.Constructor">
            <summary>Задает оболочка совместимости AdvancedSearchResult.AdvancedSearchResult()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.NavigationPagesGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.NavigationPagesSetNavigationPagesArray">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_NavigationPages(NavigationPages[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.SearchInfoGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.SearchInfoSetSearchInfo">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_SearchInfo(SearchInfo value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.SearchResultsGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.SearchResultsSetSearchResultsArray">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_SearchResults(SearchResults[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.StatusInfoGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.NavigationPagesGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.NavigationPagesSetNavigationPagesArray">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_NavigationPages(NavigationPages[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.SearchInfoGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.SearchInfoSetSearchInfo">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_SearchInfo(SearchInfo value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.SearchResultsGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.SearchResultsSetSearchResultsArray">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_SearchResults(SearchResults[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости AdvancedSearchResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimAdvancedSearchResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости AdvancedSearchResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimIdcProperty">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimIdcProperty.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimIdcProperty.#ctor(DomainModel.SearchRef.IdcProperty)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimIdcProperty.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimIdcProperty.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.Constructor">
            <summary>Задает оболочка совместимости IdcProperty.IdcProperty()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimIdcProperty.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.AllInstances.nameGet">
            <summary>Задает оболочка совместимости IdcProperty.get_name()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.AllInstances.nameSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_name(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.AllInstances.valueGet">
            <summary>Задает оболочка совместимости IdcProperty.get_value()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimIdcProperty.AllInstances.valueSetString">
            <summary>Задает оболочка совместимости IdcProperty.set_value(String value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimNavigationPages">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.NavigationPages</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationPages.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationPages.#ctor(DomainModel.SearchRef.NavigationPages)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationPages.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationPages.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.Constructor">
            <summary>Задает оболочка совместимости NavigationPages.NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.endRowGet">
            <summary>Задает оболочка совместимости NavigationPages.get_endRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.endRowSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_endRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.endRowSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_endRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.endRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_endRowSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.headerPageNumberGet">
            <summary>Задает оболочка совместимости NavigationPages.get_headerPageNumber()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.headerPageNumberSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_headerPageNumber(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.headerPageNumberSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_headerPageNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.headerPageNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_headerPageNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageNumberGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageNumber()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageNumberSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_pageNumber(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageNumberSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_pageNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageReferenceGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageReference()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageReferenceSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_pageReference(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageReferenceSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageReferenceSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.pageReferenceSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_pageReferenceSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.startRowGet">
            <summary>Задает оболочка совместимости NavigationPages.get_startRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.startRowSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_startRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.startRowSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_startRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.startRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_startRowSpecified(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.endRowGet">
            <summary>Задает оболочка совместимости NavigationPages.get_endRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.endRowSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_endRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.endRowSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_endRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.endRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_endRowSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.headerPageNumberGet">
            <summary>Задает оболочка совместимости NavigationPages.get_headerPageNumber()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.headerPageNumberSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_headerPageNumber(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.headerPageNumberSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_headerPageNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.headerPageNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_headerPageNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageNumberGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageNumber()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageNumberSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_pageNumber(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageNumberSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_pageNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageReferenceGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageReference()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageReferenceSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_pageReference(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageReferenceSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_pageReferenceSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.pageReferenceSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_pageReferenceSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.startRowGet">
            <summary>Задает оболочка совместимости NavigationPages.get_startRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.startRowSetInt32">
            <summary>Задает оболочка совместимости NavigationPages.set_startRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.startRowSpecifiedGet">
            <summary>Задает оболочка совместимости NavigationPages.get_startRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationPages.AllInstances.startRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости NavigationPages.set_startRowSpecified(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.NavigationSearchCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.#ctor(DomainModel.SearchRef.NavigationSearchCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости NavigationSearchCompletedEventArgs.NavigationSearchCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости NavigationSearchCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости NavigationSearchCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.NavigationSearchResult</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.#ctor(DomainModel.SearchRef.NavigationSearchResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.Constructor">
            <summary>Задает оболочка совместимости NavigationSearchResult.NavigationSearchResult()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.NavigationPagesGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.NavigationPagesSetNavigationPagesArray">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_NavigationPages(NavigationPages[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.SearchInfoGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.SearchInfoSetSearchInfo">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_SearchInfo(SearchInfo value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.SearchResultsGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.SearchResultsSetSearchResultsArray">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_SearchResults(SearchResults[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.StatusInfoGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.NavigationPagesGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.NavigationPagesSetNavigationPagesArray">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_NavigationPages(NavigationPages[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.SearchInfoGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.SearchInfoSetSearchInfo">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_SearchInfo(SearchInfo value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.SearchResultsGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.SearchResultsSetSearchResultsArray">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_SearchResults(SearchResults[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости NavigationSearchResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimNavigationSearchResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости NavigationSearchResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.QuickSearchCompletedEventArgs</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.#ctor(DomainModel.SearchRef.QuickSearchCompletedEventArgs)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.ConstructorObjectArrayExceptionBooleanObject">
            <summary>Задает оболочка совместимости QuickSearchCompletedEventArgs.QuickSearchCompletedEventArgs(Object[] results, Exception exception, Boolean cancelled, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.ResultGet">
            <summary>Задает оболочка совместимости QuickSearchCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchCompletedEventArgs.AllInstances.ResultGet">
            <summary>Задает оболочка совместимости QuickSearchCompletedEventArgs.get_Result()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimQuickSearchResult">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.QuickSearchResult</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.#ctor(DomainModel.SearchRef.QuickSearchResult)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.Constructor">
            <summary>Задает оболочка совместимости QuickSearchResult.QuickSearchResult()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.NavigationPagesGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.NavigationPagesSetNavigationPagesArray">
            <summary>Задает оболочка совместимости QuickSearchResult.set_NavigationPages(NavigationPages[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.SearchInfoGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.SearchInfoSetSearchInfo">
            <summary>Задает оболочка совместимости QuickSearchResult.set_SearchInfo(SearchInfo value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.SearchResultsGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.SearchResultsSetSearchResultsArray">
            <summary>Задает оболочка совместимости QuickSearchResult.set_SearchResults(SearchResults[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.StatusInfoGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости QuickSearchResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.NavigationPagesGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_NavigationPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.NavigationPagesSetNavigationPagesArray">
            <summary>Задает оболочка совместимости QuickSearchResult.set_NavigationPages(NavigationPages[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.SearchInfoGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.SearchInfoSetSearchInfo">
            <summary>Задает оболочка совместимости QuickSearchResult.set_SearchInfo(SearchInfo value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.SearchResultsGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.SearchResultsSetSearchResultsArray">
            <summary>Задает оболочка совместимости QuickSearchResult.set_SearchResults(SearchResults[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.StatusInfoGet">
            <summary>Задает оболочка совместимости QuickSearchResult.get_StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimQuickSearchResult.AllInstances.StatusInfoSetStatusInfo">
            <summary>Задает оболочка совместимости QuickSearchResult.set_StatusInfo(StatusInfo value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimSearch">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.Search</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearch.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearch.#ctor(DomainModel.SearchRef.Search)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearch.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearch.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearch.Bind(System.ComponentModel.IComponent)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearch.Bind(System.IDisposable)">
            <summary>Привязка членов интерфейса к оболочке совместимости.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AdvancedSearchAsyncStringStringStringInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.AdvancedSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AdvancedSearchAsyncStringStringStringInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости Search.AdvancedSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AdvancedSearchCompletedAddAdvancedSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.add_AdvancedSearchCompleted(AdvancedSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AdvancedSearchCompletedRemoveAdvancedSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.remove_AdvancedSearchCompleted(AdvancedSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AdvancedSearchStringStringStringInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.AdvancedSearch(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.CancelAsyncObject">
            <summary>Задает оболочка совместимости Search.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.Constructor">
            <summary>Задает оболочка совместимости Search.Search()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости Search.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.NavigationSearchAsyncStringStringStringInt32BooleanInt32BooleanInt32BooleanInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.NavigationSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, Int32 pageNumber, Boolean pageNumberSpecified, Int32 startRow, Boolean startRowSpecified, Int32 endRow, Boolean endRowSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.NavigationSearchAsyncStringStringStringInt32BooleanInt32BooleanInt32BooleanInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости Search.NavigationSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, Int32 pageNumber, Boolean pageNumberSpecified, Int32 startRow, Boolean startRowSpecified, Int32 endRow, Boolean endRowSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.NavigationSearchCompletedAddNavigationSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.add_NavigationSearchCompleted(NavigationSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.NavigationSearchCompletedRemoveNavigationSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.remove_NavigationSearchCompleted(NavigationSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.NavigationSearchStringStringStringInt32BooleanInt32BooleanInt32BooleanInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.NavigationSearch(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, Int32 pageNumber, Boolean pageNumberSpecified, Int32 startRow, Boolean startRowSpecified, Int32 endRow, Boolean endRowSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.OnAdvancedSearchOperationCompletedObject">
            <summary>Задает оболочка совместимости Search.OnAdvancedSearchOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.OnNavigationSearchOperationCompletedObject">
            <summary>Задает оболочка совместимости Search.OnNavigationSearchOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.OnQuickSearchOperationCompletedObject">
            <summary>Задает оболочка совместимости Search.OnQuickSearchOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.QuickSearchAsyncStringIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.QuickSearchAsync(String queryText, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.QuickSearchAsyncStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости Search.QuickSearchAsync(String queryText, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.QuickSearchCompletedAddQuickSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.add_QuickSearchCompleted(QuickSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.QuickSearchCompletedRemoveQuickSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.remove_QuickSearchCompleted(QuickSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.QuickSearchStringIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.QuickSearch(String queryText, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.UrlGet">
            <summary>Задает оболочка совместимости Search.get_Url()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.UrlSetString">
            <summary>Задает оболочка совместимости Search.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости Search.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости Search.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.AdvancedSearchAsyncStringStringStringInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.AdvancedSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.AdvancedSearchAsyncStringStringStringInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости Search.AdvancedSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.AdvancedSearchCompletedAddAdvancedSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.add_AdvancedSearchCompleted(AdvancedSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.AdvancedSearchCompletedRemoveAdvancedSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.remove_AdvancedSearchCompleted(AdvancedSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.AdvancedSearchStringStringStringInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.AdvancedSearch(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.CancelAsyncObject">
            <summary>Задает оболочка совместимости Search.CancelAsync(Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.IsLocalFileSystemWebServiceString">
            <summary>Задает оболочка совместимости Search.IsLocalFileSystemWebService(String url)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.NavigationSearchAsyncStringStringStringInt32BooleanInt32BooleanInt32BooleanInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.NavigationSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, Int32 pageNumber, Boolean pageNumberSpecified, Int32 startRow, Boolean startRowSpecified, Int32 endRow, Boolean endRowSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.NavigationSearchAsyncStringStringStringInt32BooleanInt32BooleanInt32BooleanInt32BooleanIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости Search.NavigationSearchAsync(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, Int32 pageNumber, Boolean pageNumberSpecified, Int32 startRow, Boolean startRowSpecified, Int32 endRow, Boolean endRowSpecified, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.NavigationSearchCompletedAddNavigationSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.add_NavigationSearchCompleted(NavigationSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.NavigationSearchCompletedRemoveNavigationSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.remove_NavigationSearchCompleted(NavigationSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.NavigationSearchStringStringStringInt32BooleanInt32BooleanInt32BooleanInt32BooleanIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.NavigationSearch(String queryText, String sortField, String sortOrder, Int32 resultCount, Boolean resultCountSpecified, Int32 pageNumber, Boolean pageNumberSpecified, Int32 startRow, Boolean startRowSpecified, Int32 endRow, Boolean endRowSpecified, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.OnAdvancedSearchOperationCompletedObject">
            <summary>Задает оболочка совместимости Search.OnAdvancedSearchOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.OnNavigationSearchOperationCompletedObject">
            <summary>Задает оболочка совместимости Search.OnNavigationSearchOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.OnQuickSearchOperationCompletedObject">
            <summary>Задает оболочка совместимости Search.OnQuickSearchOperationCompleted(Object arg)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.QuickSearchAsyncStringIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.QuickSearchAsync(String queryText, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.QuickSearchAsyncStringIdcPropertyArrayObject">
            <summary>Задает оболочка совместимости Search.QuickSearchAsync(String queryText, IdcProperty[] extraProps, Object userState)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.QuickSearchCompletedAddQuickSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.add_QuickSearchCompleted(QuickSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.QuickSearchCompletedRemoveQuickSearchCompletedEventHandler">
            <summary>Задает оболочка совместимости Search.remove_QuickSearchCompleted(QuickSearchCompletedEventHandler value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.QuickSearchStringIdcPropertyArray">
            <summary>Задает оболочка совместимости Search.QuickSearch(String queryText, IdcProperty[] extraProps)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.UrlGet">
            <summary>Задает оболочка совместимости Search.get_Url()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.UrlSetString">
            <summary>Задает оболочка совместимости Search.set_Url(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.UseDefaultCredentialsGet">
            <summary>Задает оболочка совместимости Search.get_UseDefaultCredentials()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearch.AllInstances.UseDefaultCredentialsSetBoolean">
            <summary>Задает оболочка совместимости Search.set_UseDefaultCredentials(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimSearchInfo">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.SearchInfo</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchInfo.#ctor(DomainModel.SearchRef.SearchInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.Constructor">
            <summary>Задает оболочка совместимости SearchInfo.SearchInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.endRowGet">
            <summary>Задает оболочка совместимости SearchInfo.get_endRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.endRowSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_endRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.endRowSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_endRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.endRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_endRowSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.numPagesGet">
            <summary>Задает оболочка совместимости SearchInfo.get_numPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.numPagesSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_numPages(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.numPagesSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_numPagesSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.numPagesSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_numPagesSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.pageNumberGet">
            <summary>Задает оболочка совместимости SearchInfo.get_pageNumber()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.pageNumberSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_pageNumber(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.pageNumberSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_pageNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.pageNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_pageNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.startRowGet">
            <summary>Задает оболочка совместимости SearchInfo.get_startRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.startRowSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_startRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.startRowSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_startRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.startRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_startRowSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalDocsProcessedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalDocsProcessed()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalDocsProcessedSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_totalDocsProcessed(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalDocsProcessedSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalDocsProcessedSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalDocsProcessedSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_totalDocsProcessedSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalRowsGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalRows()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalRowsSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_totalRows(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalRowsSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalRowsSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.totalRowsSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_totalRowsSpecified(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.endRowGet">
            <summary>Задает оболочка совместимости SearchInfo.get_endRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.endRowSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_endRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.endRowSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_endRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.endRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_endRowSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.numPagesGet">
            <summary>Задает оболочка совместимости SearchInfo.get_numPages()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.numPagesSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_numPages(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.numPagesSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_numPagesSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.numPagesSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_numPagesSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.pageNumberGet">
            <summary>Задает оболочка совместимости SearchInfo.get_pageNumber()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.pageNumberSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_pageNumber(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.pageNumberSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_pageNumberSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.pageNumberSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_pageNumberSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.startRowGet">
            <summary>Задает оболочка совместимости SearchInfo.get_startRow()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.startRowSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_startRow(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.startRowSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_startRowSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.startRowSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_startRowSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalDocsProcessedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalDocsProcessed()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalDocsProcessedSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_totalDocsProcessed(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalDocsProcessedSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalDocsProcessedSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalDocsProcessedSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_totalDocsProcessedSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalRowsGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalRows()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalRowsSetInt32">
            <summary>Задает оболочка совместимости SearchInfo.set_totalRows(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalRowsSpecifiedGet">
            <summary>Задает оболочка совместимости SearchInfo.get_totalRowsSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchInfo.AllInstances.totalRowsSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchInfo.set_totalRowsSpecified(Boolean value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimSearchResults">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.SearchResults</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchResults.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchResults.#ctor(DomainModel.SearchRef.SearchResults)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchResults.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimSearchResults.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.Constructor">
            <summary>Задает оболочка совместимости SearchResults.SearchResults()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.CustomDocMetaDataGet">
            <summary>Задает оболочка совместимости SearchResults.get_CustomDocMetaData()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.CustomDocMetaDataSetIdcPropertyArray">
            <summary>Задает оболочка совместимости SearchResults.set_CustomDocMetaData(IdcProperty[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.alternateFileSizeGet">
            <summary>Задает оболочка совместимости SearchResults.get_alternateFileSize()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.alternateFileSizeSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_alternateFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.alternateFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_alternateFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.alternateFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_alternateFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.alternateFormatGet">
            <summary>Задает оболочка совместимости SearchResults.get_alternateFormat()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.alternateFormatSetString">
            <summary>Задает оболочка совместимости SearchResults.set_alternateFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocAccountGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocAccount()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocAccountSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocAccount(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocAuthorGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocAuthor()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocAuthorSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocNameGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocNameSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocTitleGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocTitle()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocTitleSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocTypeGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dDocTypeSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dExtensionGet">
            <summary>Задает оболочка совместимости SearchResults.get_dExtension()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dExtensionSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dFormatGet">
            <summary>Задает оболочка совместимости SearchResults.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dFormatSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dGifGet">
            <summary>Задает оболочка совместимости SearchResults.get_dGif()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dGifSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dGif(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dIDGet">
            <summary>Задает оболочка совместимости SearchResults.get_dID()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dIDSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dInDateGet">
            <summary>Задает оболочка совместимости SearchResults.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dInDateSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dOriginalNameGet">
            <summary>Задает оболочка совместимости SearchResults.get_dOriginalName()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dOriginalNameSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dOriginalName(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dOutDateGet">
            <summary>Задает оболочка совместимости SearchResults.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dOutDateSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dPublishTypeGet">
            <summary>Задает оболочка совместимости SearchResults.get_dPublishType()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dPublishTypeSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dPublishType(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRendition1Get">
            <summary>Задает оболочка совместимости SearchResults.get_dRendition1()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRendition1SetString">
            <summary>Задает оболочка совместимости SearchResults.set_dRendition1(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRendition2Get">
            <summary>Задает оболочка совместимости SearchResults.get_dRendition2()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRendition2SetString">
            <summary>Задает оболочка совместимости SearchResults.set_dRendition2(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRevLabelGet">
            <summary>Задает оболочка совместимости SearchResults.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRevLabelSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRevisionIDGet">
            <summary>Задает оболочка совместимости SearchResults.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dSecurityGroupGet">
            <summary>Задает оболочка совместимости SearchResults.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dWebExtensionGet">
            <summary>Задает оболочка совместимости SearchResults.get_dWebExtension()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.dWebExtensionSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dWebExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.urlGet">
            <summary>Задает оболочка совместимости SearchResults.get_url()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.urlSetString">
            <summary>Задает оболочка совместимости SearchResults.set_url(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.vaultFileSizeGet">
            <summary>Задает оболочка совместимости SearchResults.get_vaultFileSize()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.vaultFileSizeSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_vaultFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.vaultFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_vaultFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.vaultFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_vaultFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.webCgiRootGet">
            <summary>Задает оболочка совместимости SearchResults.get_webCgiRoot()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.webCgiRootSetString">
            <summary>Задает оболочка совместимости SearchResults.set_webCgiRoot(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.webFileSizeGet">
            <summary>Задает оболочка совместимости SearchResults.get_webFileSize()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.webFileSizeSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_webFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.webFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_webFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.webFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_webFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocAnnotationGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocAnnotation()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocAnnotationSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocAnnotation(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocAuthorsTPU_FIOGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocAuthorsTPU_FIO()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocAuthorsTPU_FIOSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocAuthorsTPU_FIO(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocCaptionGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocCaptionSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocCoAuthorsGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocCoAuthors()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocCoAuthorsSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocCoAuthors(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocKeyWordsGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocKeyWords()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.xDocKeyWordsSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocKeyWords(String value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.CustomDocMetaDataGet">
            <summary>Задает оболочка совместимости SearchResults.get_CustomDocMetaData()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.CustomDocMetaDataSetIdcPropertyArray">
            <summary>Задает оболочка совместимости SearchResults.set_CustomDocMetaData(IdcProperty[] value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.alternateFileSizeGet">
            <summary>Задает оболочка совместимости SearchResults.get_alternateFileSize()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.alternateFileSizeSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_alternateFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.alternateFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_alternateFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.alternateFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_alternateFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.alternateFormatGet">
            <summary>Задает оболочка совместимости SearchResults.get_alternateFormat()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.alternateFormatSetString">
            <summary>Задает оболочка совместимости SearchResults.set_alternateFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocAccountGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocAccount()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocAccountSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocAccount(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocAuthorGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocAuthor()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocAuthorSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocAuthor(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocNameGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocName()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocNameSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocName(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocTitleGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocTitle()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocTitleSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocTitle(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocTypeGet">
            <summary>Задает оболочка совместимости SearchResults.get_dDocType()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dDocTypeSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dDocType(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dExtensionGet">
            <summary>Задает оболочка совместимости SearchResults.get_dExtension()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dExtensionSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dFormatGet">
            <summary>Задает оболочка совместимости SearchResults.get_dFormat()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dFormatSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dFormat(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dGifGet">
            <summary>Задает оболочка совместимости SearchResults.get_dGif()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dGifSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dGif(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dIDGet">
            <summary>Задает оболочка совместимости SearchResults.get_dID()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dIDSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_dID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dIDSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_dIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_dIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dInDateGet">
            <summary>Задает оболочка совместимости SearchResults.get_dInDate()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dInDateSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dInDate(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dOriginalNameGet">
            <summary>Задает оболочка совместимости SearchResults.get_dOriginalName()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dOriginalNameSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dOriginalName(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dOutDateGet">
            <summary>Задает оболочка совместимости SearchResults.get_dOutDate()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dOutDateSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dOutDate(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dPublishTypeGet">
            <summary>Задает оболочка совместимости SearchResults.get_dPublishType()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dPublishTypeSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dPublishType(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRendition1Get">
            <summary>Задает оболочка совместимости SearchResults.get_dRendition1()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRendition1SetString">
            <summary>Задает оболочка совместимости SearchResults.set_dRendition1(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRendition2Get">
            <summary>Задает оболочка совместимости SearchResults.get_dRendition2()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRendition2SetString">
            <summary>Задает оболочка совместимости SearchResults.set_dRendition2(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRevLabelGet">
            <summary>Задает оболочка совместимости SearchResults.get_dRevLabel()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRevLabelSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dRevLabel(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRevisionIDGet">
            <summary>Задает оболочка совместимости SearchResults.get_dRevisionID()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRevisionIDSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_dRevisionID(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRevisionIDSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_dRevisionIDSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dRevisionIDSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_dRevisionIDSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dSecurityGroupGet">
            <summary>Задает оболочка совместимости SearchResults.get_dSecurityGroup()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dSecurityGroupSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dSecurityGroup(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dWebExtensionGet">
            <summary>Задает оболочка совместимости SearchResults.get_dWebExtension()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.dWebExtensionSetString">
            <summary>Задает оболочка совместимости SearchResults.set_dWebExtension(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.urlGet">
            <summary>Задает оболочка совместимости SearchResults.get_url()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.urlSetString">
            <summary>Задает оболочка совместимости SearchResults.set_url(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.vaultFileSizeGet">
            <summary>Задает оболочка совместимости SearchResults.get_vaultFileSize()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.vaultFileSizeSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_vaultFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.vaultFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_vaultFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.vaultFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_vaultFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.webCgiRootGet">
            <summary>Задает оболочка совместимости SearchResults.get_webCgiRoot()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.webCgiRootSetString">
            <summary>Задает оболочка совместимости SearchResults.set_webCgiRoot(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.webFileSizeGet">
            <summary>Задает оболочка совместимости SearchResults.get_webFileSize()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.webFileSizeSetInt32">
            <summary>Задает оболочка совместимости SearchResults.set_webFileSize(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.webFileSizeSpecifiedGet">
            <summary>Задает оболочка совместимости SearchResults.get_webFileSizeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.webFileSizeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости SearchResults.set_webFileSizeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocAnnotationGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocAnnotation()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocAnnotationSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocAnnotation(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocAuthorsTPU_FIOGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocAuthorsTPU_FIO()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocAuthorsTPU_FIOSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocAuthorsTPU_FIO(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocCaptionGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocCaption()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocCaptionSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocCaption(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocCoAuthorsGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocCoAuthors()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocCoAuthorsSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocCoAuthors(String value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocKeyWordsGet">
            <summary>Задает оболочка совместимости SearchResults.get_xDocKeyWords()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimSearchResults.AllInstances.xDocKeyWordsSetString">
            <summary>Задает оболочка совместимости SearchResults.set_xDocKeyWords(String value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimStatusInfo">
            <summary>Тип оболочки совместимости для DomainModel.SearchRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimStatusInfo.#ctor">
            <summary>Инициализация нового экземпляра оболочки совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimStatusInfo.#ctor(DomainModel.SearchRef.StatusInfo)">
            <summary>Инициализация новой оболочки совместимости для заданного экземпляра</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimStatusInfo.BehaveAsCurrent">
            <summary>Назначение поведения &quot;Current&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.ShimStatusInfo.BehaveAsNotImplemented">
            <summary>Назначение поведения &quot;NotImplemented&quot; всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.Behavior">
            <summary>Назначение поведения всем методам типа с оболочкой совместимости</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.Constructor">
            <summary>Задает оболочка совместимости StatusInfo.StatusInfo()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances">
            <summary>Определение оболочек совместимости для всех членов экземпляров</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances.statusCodeGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCode()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSetInt32">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCode(Int32 value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusCodeSpecified()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances.statusCodeSpecifiedSetBoolean">
            <summary>Задает оболочка совместимости StatusInfo.set_statusCodeSpecified(Boolean value)</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances.statusMessageGet">
            <summary>Задает оболочка совместимости StatusInfo.get_statusMessage()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.ShimStatusInfo.AllInstances.statusMessageSetString">
            <summary>Задает оболочка совместимости StatusInfo.set_statusMessage(String value)</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubAdvancedSearchResult">
            <summary>Тип заглушки DomainModel.SearchRef.AdvancedSearchResult</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubAdvancedSearchResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubAdvancedSearchResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubAdvancedSearchResult</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubAdvancedSearchResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubAdvancedSearchResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubAdvancedSearchResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubIdcProperty">
            <summary>Тип заглушки DomainModel.SearchRef.IdcProperty</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubIdcProperty.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubIdcProperty.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubIdcProperty</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubIdcProperty.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubIdcProperty.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubIdcProperty.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubNavigationPages">
            <summary>Тип заглушки DomainModel.SearchRef.NavigationPages</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubNavigationPages.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubNavigationPages.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNavigationPages</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubNavigationPages.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubNavigationPages.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubNavigationPages.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubNavigationSearchResult">
            <summary>Тип заглушки DomainModel.SearchRef.NavigationSearchResult</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubNavigationSearchResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubNavigationSearchResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubNavigationSearchResult</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubNavigationSearchResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubNavigationSearchResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubNavigationSearchResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubQuickSearchResult">
            <summary>Тип заглушки DomainModel.SearchRef.QuickSearchResult</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubQuickSearchResult.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubQuickSearchResult.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubQuickSearchResult</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubQuickSearchResult.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubQuickSearchResult.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubQuickSearchResult.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubSearch">
            <summary>Тип заглушки DomainModel.SearchRef.Search</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.Abort">
            <summary>Задает заглушка WebClientProtocol.Abort()</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.Abort01">
            <summary>Задает stub WebClientProtocol.Abort()</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.AttachBackingFieldToSite">
            <summary>Присоединение делегатов для эмуляции StubSearch.Site как свойства с резервным полем.</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.CanRaiseEventsGet">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.Dispose(System.Boolean)">
            <summary>Задает заглушка Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.DisposeBoolean">
            <summary>Задает stub Component.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.GetReaderForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.GetService(System.Type)">
            <summary>Задает заглушка Component.GetService(Type service)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.GetServiceType">
            <summary>Задает stub Component.GetService(Type service)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.GetWebRequest(System.Uri)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.GetWebRequestUri">
            <summary>Задает stub SoapHttpClientProtocol.GetWebRequest(Uri uri)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.GetWebResponse(System.Net.WebRequest)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>Задает заглушка HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.GetWebResponseWebRequest">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.GetWebResponseWebRequestIAsyncResult">
            <summary>Задает stub HttpWebClientProtocol.GetWebResponse(WebRequest request, IAsyncResult result)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)">
            <summary>Задает заглушка SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.GetWriterForMessageSoapClientMessageInt32">
            <summary>Задает stub SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage message, Int32 bufferSize)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSearch</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.SiteGet">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.SiteSetISite">
            <summary>Задает stub Component.set_Site(ISite value)</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearch.ToString">
            <summary>Задает заглушка Component.ToString()</summary>
        </member>
        <member name="F:DomainModel.SearchRef.Fakes.StubSearch.ToString01">
            <summary>Задает stub Component.ToString()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearch.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearch.CanRaiseEvents">
            <summary>Задает stub Component.get_CanRaiseEvents()</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearch.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearch.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearch.Site">
            <summary>Задает stub Component.get_Site()</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubSearchInfo">
            <summary>Тип заглушки DomainModel.SearchRef.SearchInfo</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearchInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearchInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSearchInfo</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearchInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearchInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearchInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubSearchResults">
            <summary>Тип заглушки DomainModel.SearchRef.SearchResults</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearchResults.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubSearchResults.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubSearchResults</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearchResults.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearchResults.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubSearchResults.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
        <member name="T:DomainModel.SearchRef.Fakes.StubStatusInfo">
            <summary>Тип заглушки DomainModel.SearchRef.StatusInfo</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubStatusInfo.#ctor">
            <summary>Инициализирует новый экземпляр</summary>
        </member>
        <member name="M:DomainModel.SearchRef.Fakes.StubStatusInfo.InitializeStub">
            <summary>Инициализирует новый экземпляр type StubStatusInfo</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubStatusInfo.CallBase">
            <summary>Получает или задает значение, указывающее, следует ли вызывать базовый метод вместо резервного поведения</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubStatusInfo.InstanceBehavior">
            <summary>Получает или задает поведение экземпляра.</summary>
        </member>
        <member name="P:DomainModel.SearchRef.Fakes.StubStatusInfo.InstanceObserver">
            <summary>Получает или задает наблюдатель экземпляра.</summary>
        </member>
    </members>
</doc>
